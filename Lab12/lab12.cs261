Script started on 2023-11-15 13:29:50-06:00 [TERM="xterm-256color" TTY="/dev/pts/911" COLUMNS="120" LINES="30"]
misma2@cs-sys3:~/Documents/CS261Labs/Lab12$ ls
cache_simulator  cache_simulator.zip  lab12.cs261
misma2@cs-sys3:~/Documents/CS261Labs/Lab12$ cd cash[Kc[K[Kche_simulator
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ ;[Kl
l: command not found
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ lls[K[Ks
blocking.cc  cache  histogram.cc  inst_compact.h  inst_legible.h  inst_none.h  qsort.cc  sort.cc  xsort.cc
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ cat qsort.cc 
#include <iostream>
using namespace std;
int Partition(int list[], int lo, int hi);

// QuickSort - this simple version assumes no repeated items in the list
void QSort(int list[], int lo, int hi)
{
  int k;
  if (lo < hi) {
    // Partition the list into two sub-lists
    k = Partition(list, lo, hi);
    // Now every item left of position k is smaller than the item at k,
    // while every item right of position k is larger than the item at k
    QSort(list, lo, k - 1); // sort the sublist to the left of k
    QSort(list, k + 1, hi); // sort the sublist to the right of k
  }
}

// Partition function for QuickSort
int Partition(int list[], int lo, int hi)
{
  int x, tmp;
  // Pick an arbitrary key, say half way through the list
  x = list[(lo + hi) / 2];
  // Now swap items until every item to the left of the key is smaller than
  // the key, and every item to the right of the key is larger than the key
  while (lo < hi) 
  {
    // Scan from the right until we find an item smaller than the key
    if (lo < hi)
    {
      INST_R(list[hi]); //given!
    }    
    while ( (lo < hi) && (x < list[hi]) ) 
    {
      hi--;	
      if (lo >= hi)
      {
        break;
      }
      else
      {
        INST_R(list[hi]); //given!
      }
    }
    // you may need to edit this section below..

    // Scan from the left until we find an item larger than the key
    while ( (lo < hi) && (x > list[lo]) ) 
    {
      lo++;
    }
    // Swap the two items we've discovered on the wrong side of the key
    tmp = list[lo]; 
    list[lo] = list[hi]; 
    list[hi] = tmp;
  }
  return lo; // this is where the key is now
}
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ cat xsort.cc 
#include <iostream>
using namespace std;

void XSort(int list[], int n)
  // Exchange sort
{
  int min, tmp, i, j, min_j;
  // Scan the list from the left to the right
  for (i = 0; i < n - 1; i++) {
    // Remember the item at position i
    min = list[i]; 
    min_j = i;
    // Check the list to the right of position i for any smaller items
    for (j = i + 1; j < n; j++) {
      if (list[j] < min) {
        // Remember where this smaller item is
        min = list[j]; 
        min_j = j;
      }
    }
    // Swap the item at position i with the smallest item found to the right
    tmp = list[min_j]; 
    list[min_j] = list[i];
    list[i] = tmp;
  }
}
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ nano qsort.cc 
[?2004h[?1049h[22;0;0t[1;30r(B[m[4l[?7h[39;49m[?1h=[?1h=[?25l[39;49m(B[m[H[2J[28;54H(B[0;7m[ Reading... ](B[m[28;38H(B[0;7m[ Read 59 lines (Converted from DOS format) ](B[m[H(B[0;7m  GNU nano 4.8                                            qsort.cc                                                      [1;119H(B[m[29d(B[0;7m^G(B[m Get Help    (B[0;7m^O(B[m Write Out   (B[0;7m^W(B[m Where Is    (B[0;7m^K(B[m Cut Text    (B[0;7m^J(B[m Justify     (B[0;7m^C(B[m Cur Pos     (B[0;7mM-U(B[m Undo[106G(B[0;7mM-A(B[m Mark Text[30d(B[0;7m^X(B[m Exit[30;16H(B[0;7m^R(B[m Read File   (B[0;7m^\(B[m Replace     (B[0;7m^U(B[m Paste Text  (B[0;7m^T(B[m To Spell    (B[0;7m^_(B[m Go To Line  (B[0;7mM-E(B[m Redo[106G(B[0;7mM-6(B[m Copy Text[28d[2d(B[0;1m[36m#include[33m <iostream>[3d(B[0m[32musing[39m(B[m [32mnamespace[39m(B[m std;[4d[32mint[39m(B[m Partition([32mint[39m(B[m list[], [32mint[39m(B[m lo, [32mint[39m(B[m hi);[6d(B[0;1m[34m// QuickSort - this simple version assumes no repeated items in the list[7d(B[0m[32mvoid[39m(B[m QSort([32mint[39m(B[m list[], [32mint[39m(B[m lo, [32mint[39m(B[m hi)[8d{[9d [32mint[39m(B[m k;[10;3H(B[0;1m[33mif[39m(B[m (lo < hi) {[11;5H(B[0;1m[34m// Partition the list into two sub-lists[12;5H[39m(B[mk = Partition(list, lo, hi);[13;5H(B[0;1m[34m// Now every item left of position k is smaller than the item at k,[14;5H// while every item right of position k is larger than the item at k[15;5H[39m(B[mQSort(list, lo, k - 1); (B[0;1m[34m// sort the sublist to the left of k[16;5H[39m(B[mQSort(list, k + 1, hi); (B[0;1m[34m// sort the sublist to the right of k[17;3H[39m(B[m}[18d}[20d(B[0;1m[34m// Partition function for QuickSort[21d(B[0m[32mint[39m(B[m Partition([32mint[39m(B[m list[], [32mint[39m(B[m lo, [32mint[39m(B[m hi)[22d{[23d [32mint[39m(B[m x, tmp;[24;3H(B[0;1m[34m// Pick an arbitrary key, say half way through the list[25;3H[39m(B[mx = list[(lo + hi) / 2];[26;3H(B[0;1m[34m// Now swap items until every item to the left of the key is smaller than[27;3H// the key, and every item to the right of the key is larger than the key[2d[39m(B[m[?12l[?25h[?25l[3d[?12l[?25h[?25l[A[?12l[?25h[?25l[?12l[?25h[?25l[28d[J[30d[?12l[?25h[30;1H[?1049l[23;0;0t[?1l>[?2004lmisma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ ls
blocking.cc  cache  histogram.cc  inst_compact.h  inst_legible.h  inst_none.h  qsort.cc  sort.cc  xsort.cc
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ lsnano qsort.cc 
[?2004h[?1049h[22;0;0t[1;30r(B[m[4l[?7h[39;49m[?1h=[?1h=[?25l[39;49m(B[m[H[2J[28;54H(B[0;7m[ Reading... ](B[m[28;38H(B[0;7m[ Read 59 lines (Converted from DOS format) ](B[m[H(B[0;7m  GNU nano 4.8                                            qsort.cc                                                      [1;119H(B[m[29d(B[0;7m^G(B[m Get Help    (B[0;7m^O(B[m Write Out   (B[0;7m^W(B[m Where Is    (B[0;7m^K(B[m Cut Text    (B[0;7m^J(B[m Justify     (B[0;7m^C(B[m Cur Pos     (B[0;7mM-U(B[m Undo[106G(B[0;7mM-A(B[m Mark Text[30d(B[0;7m^X(B[m Exit[30;16H(B[0;7m^R(B[m Read File   (B[0;7m^\(B[m Replace     (B[0;7m^U(B[m Paste Text  (B[0;7m^T(B[m To Spell    (B[0;7m^_(B[m Go To Line  (B[0;7mM-E(B[m Redo[106G(B[0;7mM-6(B[m Copy Text[28d[2d(B[0;1m[36m#include[33m <iostream>[3d(B[0m[32musing[39m(B[m [32mnamespace[39m(B[m std;[4d[32mint[39m(B[m Partition([32mint[39m(B[m list[], [32mint[39m(B[m lo, [32mint[39m(B[m hi);[6d(B[0;1m[34m// QuickSort - this simple version assumes no repeated items in the list[7d(B[0m[32mvoid[39m(B[m QSort([32mint[39m(B[m list[], [32mint[39m(B[m lo, [32mint[39m(B[m hi)[8d{[9d [32mint[39m(B[m k;[10;3H(B[0;1m[33mif[39m(B[m (lo < hi) {[11;5H(B[0;1m[34m// Partition the list into two sub-lists[12;5H[39m(B[mk = Partition(list, lo, hi);[13;5H(B[0;1m[34m// Now every item left of position k is smaller than the item at k,[14;5H// while every item right of position k is larger than the item at k[15;5H[39m(B[mQSort(list, lo, k - 1); (B[0;1m[34m// sort the sublist to the left of k[16;5H[39m(B[mQSort(list, k + 1, hi); (B[0;1m[34m// sort the sublist to the right of k[17;3H[39m(B[m}[18d}[20d(B[0;1m[34m// Partition function for QuickSort[21d(B[0m[32mint[39m(B[m Partition([32mint[39m(B[m list[], [32mint[39m(B[m lo, [32mint[39m(B[m hi)[22d{[23d [32mint[39m(B[m x, tmp;[24;3H(B[0;1m[34m// Pick an arbitrary key, say half way through the list[25;3H[39m(B[mx = list[(lo + hi) / 2];[26;3H(B[0;1m[34m// Now swap items until every item to the left of the key is smaller than[27;3H// the key, and every item to the right of the key is larger than the key[2d[39m(B[m[?12l[?25h[?25l[3d[?12l[?25h[?25l[1;111H(B[0;7mModified(B[m[3;27r[3;1HM[1;30r[4;1H[?12l[?25h[?25l[A[?12l[?25h[?25l#[?12l[?25h[?25li[?12l[?25h[?25ln[?12l[?25h[?25lc[?12l[?25h[?25ll[?12l[?25h[?25lu[?12l[?25h[?25ld[?12l[?25h[?25l(B[0;1m[36m#include[39m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l "[?12l[?25h[?25li[?12l[?25h[?25ln[?12l[?25h[?25ls[?12l[?25h[?25lt[?12l[?25h[?25l_[?12l[?25h[?25ll[?12l[?25h[?25le[?12l[?25h[?25lg[?12l[?25h[?25li[?12l[?25h[?25lb[?12l[?25h[?25le[?12l[?25h[?25l [?12l[?25h[?25ll[28d[K[3;22H[?12l[?25h[?25le[?12l[?25h[?25l.[?12l[?25h[?25lh[?12l[?25h[?25l[3;10H(B[0;1m[33m"inst_legible.h"[39m(B[m[?12l[?25h[?25l/[?12l[?25h[?25l(B[0;1m[34m//[39m(B[m[?12l[?25h[?25l(B[0;1m[34mF[39m(B[m[?12l[?25h[?25l(B[0;1m[34mo[39m(B[m[?12l[?25h[?25l(B[0;1m[34mr[39m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l(B[0;1m[34m i[39m(B[m[?12l[?25h[?25l(B[0;1m[34mn[39m(B[m[?12l[?25h[?25l(B[0;1m[34ms[39m(B[m[?12l[?25h[?25l(B[0;1m[34mt[39m(B[m[?12l[?25h[?25l(B[0;1m[34mr[39m(B[m[?12l[?25h[?25l7[4;27r8[4dM[1;30r[4;1H[?12l[?25h[?25l[5d[?12l[?25h[?25l[6d[?12l[?25h[?25l[7d[?12l[?25h[?25l[8d[?12l[?25h[?25l[9d[?12l[?25h[?25l[10d[?12l[?25h[?25l[11d[?12l[?25h[?25l[12d[?12l[?25h[?25l[13d[?12l[?25h[?25l[14d[?12l[?25h[?25l[15d[?12l[?25h[?25l[16d[?12l[?25h[?25l[17d[?12l[?25h[?25l[18d[?12l[?25h[?25l[19d[?12l[?25h[?25l[20d[?12l[?25h[?25l[21d[?12l[?25h[?25l[22d[?12l[?25h[?25l[23d[?12l[?25h[?25l[24d[?12l[?25h[?25l[25d[?12l[?25h[?25l[26d[?12l[?25h[?25l[27d[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;3H(B[0;1m[34m// Now swap items until every item to the left of the key is smaller than[39m(B[m[?12l[?25h[?25l[A[?12l[?25h[?25l[25;58H[?12l[?25h[?25l[26d[K[27d  x = list[(lo + hi) / 2];[K[A[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l  I[?12l[?25h[?25l(B[0;1m[31mIN[39m(B[m[?12l[?25h[?25l(B[0;1m[31mS[39m(B[m[?12l[?25h[?25l(B[0;1m[31mT[39m(B[m[?12l[?25h[?25l(B[0;1m[31mR[39m(B[m[?12l[?25h[?25l [?12l[?25h[?25l(B[0;1m[31m_[39m(B[m[?12l[?25h[?25l(B[0;1m[31mR[39m(B[m[?12l[?25h[?25l([?12l[?25h[?25ll[?12l[?25h[?25li[?12l[?25h[?25ls[?12l[?25h[?25lt[?12l[?25h[?25l[[?12l[?25h[?25l [?12l[?25h[?25l)[?12l[?25h[?25l [?12l[?25h[?25l([?12l[?25h[?25ll[?12l[?25h[?25lo[?12l[?25h[?25l+[?12l[?25h[?25lh[?12l[?25h[?25li[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l +[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l h[?12l[?25h[?25li[?12l[?25h[?25l)[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l /[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l 2[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25ls[?12l[?25h[?25lt[?12l[?25h[?25l[(lo + hi) / 2[26;15H[?12l[?25h[?25l([?12l[?25h[?25ll[?12l[?25h[?25lo[?12l[?25h[?25l [?12l[?25h[?25l+[?12l[?25h[?25l [?12l[?25h[?25lh[?12l[?25h[?25li[?12l[?25h[?25l)[?12l[?25h[?25l [?12l[?25h[?25l/[?12l[?25h[?25l [?12l[?25h[?25l2[?12l[?25h[?25l][?12l[?25h[?25l)[?12l[?25h[?25l;[?12l[?25h[?25l[27;27H[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;3H(B[0;1m[34m// Now swap items until every item to the left of the key is smaller than[27;31H[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;3H(B[0;1m[34m// the key, and every item to the right of the key is larger than the key[27;31H[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;3H(B[0;1m[33mwhile[39m(B[m (lo < hi)[42m [49m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;3H{[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H(B[0;1m[34m// Scan from the right until we find an item smaller than the key[27;31H[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H(B[0;1m[33mif[39m(B[m (lo < hi)[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H{[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;7H(B[0;1m[31mINST_R[39m(B[m(list[hi]); (B[0;1m[34m//given![39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H}[42m    [49m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H(B[0;1m[33mwhile[39m(B[m ( (lo < hi) && (x < list[hi]) )[42m [27;31H[49m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H{[?12l[?25h[?25l[26;31H[?12l[?25h[?25l[25;10H[?12l[?25h[?25l[24;31H[?12l[?25h[?25l[25;10H[?12l[?25h[?25l[26;31H[?12l[?25h[?25l[27;6H[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;7Hhi--;[42m     [49m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;7H(B[0;1m[33mif[39m(B[m (lo >= hi)[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;7H{[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;9H[35mbreak[39m(B[m;[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;7H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;7H(B[0;1m[33melse[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;7H{[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;9H(B[0;1m[31mINST_R[39m(B[m(list[hi]); (B[0;1m[34m//given![39m(B[m[?12l[?25h[?25l[26;8H[?12l[?25h[?25l[25;11H[?12l[?25h[?25l[A[?12l[?25h[?25l[23;15H[?12l[?25h[?25l[22;8H[?12l[?25h[?25l[21;20H[?12l[?25h[?25l[A[?12l[?25h[?25l[19;6H[?12l[?25h[?25l[18;31H[?12l[?25h[?25l[17;10H[?12l[?25h[?25l[16;31H[?12l[?25h[?25l[15;6H[?12l[?25h[?25l7[16;27r8[16dM[1;30r[16;1H[?12l[?25h[?25l[8G[42m[1K [49m(B[m[?12l[?25h[?25l[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[1K I[?12l[?25h[?25l(B[0;1m[31mIN(B[0m[42m        [16;9H[49m(B[m[?12l[?25h[?25l(B[0;1m[31mS[39m(B[m[?12l[?25h[?25l(B[0;1m[31mT[39m(B[m[?12l[?25h[?25l(B[0;1m[31m_[39m(B[m[?12l[?25h[?25l)[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l(B[0;1m[31mR[39m(B[m[?12l[?25h[?25l([?12l[?25h[?25ll[?12l[?25h[?25li[?12l[?25h[?25ls[42m        [16;17H[49m(B[m[?12l[?25h[?25lt[?12l[?25h[?25l[[?12l[?25h[?25ll[?12l[?25h[?25lo[?12l[?25h[?25l][?12l[?25h[?25l)[?12l[?25h[?25l;[?12l[?25h[?25l[C[?12l[?25h[?25l[17d[?12l[?25h[?25l[18d[?12l[?25h[?25l[17;33H[?12l[?25h[?25l7[18;27r8[18dM[1;30r[18;1H[?12l[?25h[?25l[8G[42m[1K [49m(B[m[?12l[?25h[?25l[K[?12l[?25h[?25l[8G[42m[1K [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[8G[42m[1K [49m(B[m[?12l[?25h[?25l[1K t[?12l[?25h[?25lm[?12l[?25h[?25lp[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l =[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l l[?12l[?25h[?25li[?12l[?25h[?25ls[?12l[?25h[?25lt[?12l[?25h[?25l[[?12l[?25h[?25ll[?12l[?25h[?25lo[?12l[?25h[?25l][?12l[?25h[?25l;[?12l[?25h[?25l7[19;27r8[19dM[1;30r[19;1H[?12l[?25h[?25l[8G[42m[1K [49m(B[m[?12l[?25h[?25l[1K l[?12l[?25h[?25li[?12l[?25h[?25ls[?12l[?25h[?25lt[?12l[?25h[?25l[[?12l[?25h[?25ll[?12l[?25h[?25lo[?12l[?25h[?25l][?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l =[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l l[?12l[?25h[?25li[?12l[?25h[?25ls[?12l[?25h[?25lt[?12l[?25h[?25l[[?12l[?25h[?25lh[?12l[?25h[?25li[?12l[?25h[?25l][?12l[?25h[?25l;[?12l[?25h[?25l7[20;27r8[20dM[1;30r[20;1H[?12l[?25h[?25l[8G[42m[1K [49m(B[m[?12l[?25h[?25l[1K I[?12l[?25h[?25l(B[0;1m[31mIN[39m(B[m[?12l[?25h[?25l(B[0;1m[31mS[39m(B[m[?12l[?25h[?25l(B[0;1m[31mT[39m(B[m[?12l[?25h[?25l(B[0;1m[31m_[39m(B[m[?12l[?25h[?25l(B[0;1m[31mW[39m(B[m[?12l[?25h[?25l([?12l[?25h[?25ll[?12l[?25h[?25lo[?12l[?25h[?25ls[?12l[?25h[?25lt[?12l[?25h[?25l[[?12l[?25h[?25ll[?12l[?25h[?25lo[?12l[?25h[?25l][?12l[?25h[?25l)[?12l[?25h[?25l_[?12l[?25h[?25l [?12l[?25h[?25l;[?12l[?25h[?25l7[21;27r8[21dM[1;30r[21;1H[?12l[?25h[?25l[8G[42m[1K [49m(B[m[?12l[?25h[?25l[1K l[?12l[?25h[?25li[?12l[?25h[?25ls[?12l[?25h[?25lt[?12l[?25h[?25l[[?12l[?25h[?25lj[?12l[?25h[?25li[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25lh[?12l[?25h[?25li[?12l[?25h[?25l][?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l =[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l t[?12l[?25h[?25lm[?12l[?25h[?25lp[?12l[?25h[?25l;[?12l[?25h[?25l7[22;27r8[22dM[1;30r[22;1H[?12l[?25h[?25l[8G[42m[1K [49m(B[m[?12l[?25h[?25l[1K I[?12l[?25h[?25l(B[0;1m[31mIN[39m(B[m[?12l[?25h[?25l(B[0;1m[31mS[39m(B[m[?12l[?25h[?25l(B[0;1m[31mT[39m(B[m[?12l[?25h[?25l+[?12l[?25h[?25lW[?12l[?25h[?25l [?12l[?25h[?25l(B[0;1m[31m_[39m(B[m[?12l[?25h[?25l(B[0;1m[31mW[39m(B[m[?12l[?25h[?25l([?12l[?25h[?25ll[?12l[?25h[?25lo[?12l[?25h[?25l [?12l[?25h[?25li[?12l[?25h[?25ls[?12l[?25h[?25lt[?12l[?25h[?25l[[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[1P[?12l[?25h[?25list[lo]);[20;18H[?12l[?25h[?25l[21d[?12l[?25h[?25l[22d[?12l[?25h[?25ls[?12l[?25h[?25lt[?12l[?25h[?25l[[?12l[?25h[?25lh[?12l[?25h[?25li[?12l[?25h[?25l][?12l[?25h[?25l)[?12l[?25h[?25l;[?12l[?25h[?25l[A[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[A[?12l[?25h[?25l[?12l[?25h[?25l[A[?12l[?25h[?25l[?12l[?25h[?25l[A[?12l[?25h[?25l[?12l[?25h[?25l[A[?12l[?25h[?25l[?12l[?25h[?25l[A[?12l[?25h[?25l[?12l[?25h[?25l[17d[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l [?12l[?25h[?25l[1P[6G[?12l[?25h[?25l[1P    [?12l[?25h[?25l[1P   [?12l[?25h[?25l[1P  [?12l[?25h[?25l[1P [?12l[?25h[?25l[1P[?12l[?25h[?25l[17;28r[28;1H
[1;30r[16;24H (B[0;1m[31mINST_R[39m(B[m(list[hi]); (B[0;1m[34m//given![27;7H[39m(B[m{[16;25H[?12l[?25h[?25l7[17;27r8[17dM[1;30r[16;24H[42m [49m(B[m[K[17d(B[0;1m[31mINST_R[39m(B[m(list[hi]); (B[0;1m[34m//given![39m(B[m[?12l[?25h[?25l[8G[1K (B[0;1m[31mINST_R[39m(B[m(list[hi]); (B[0;1m[34m//given![17;9H[39m(B[m[?12l[?25h[?25l[A[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l (B[0;1m[31mINST_R[39m(B[m(list[lo]);[42m        [8G[49m(B[m[?12l[?25h[?25l (B[0;1m[31mINST_R[39m(B[m(list[lo]);[16;9H[?12l[?25h[?25l[17d[?12l[?25h[?25l[18d[?12l[?25h[?25l[19d[?12l[?25h[?25l[20d[?12l[?25h[?25l[21d[?12l[?25h[?25l[22d[?12l[?25h[?25l[23d[?12l[?25h[?25l[24d[?12l[?25h[?25l[25;6H[?12l[?25h[?25l[24;9H[?12l[?25h[?25l[A[?12l[?25h[?25l[24d[?12l[?25h[?25l[25;6H[?12l[?25h[?25l[26;9H[?12l[?25h[?25l[27d[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;7H{[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;9H[35mbreak[39m(B[m;[9G[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;7H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;7H(B[0;1m[33melse[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;7H{[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;9H(B[0;1m[31mINST_R[39m(B[m(list[hi]); (B[0;1m[34m//given![27;9H[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;7H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H(B[0;1m[34m// you may need to edit this section below..[27;9H[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;1H[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H(B[0;1m[34m// Scan from the left until we find an item larger than the key[27;9H[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H(B[0;1m[33mwhile[39m(B[m ( (lo < hi) && (x > list[lo]) )[42m [27;9H[49m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H{[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;7Hlo++;[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H(B[0;1m[34m// Swap the two items we've discovered on the wrong side of the key[27;9H[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5Htmp = list[lo];[42m [27;9H[49m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5Hlist[lo] = list[hi];[42m [27;9H[49m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5Hlist[hi] = tmp;[27;9H[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;3H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;3H[35mreturn[39m(B[m lo; (B[0;1m[34m// this is where the key is now[27;9H[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;1H}[?12l[?25h[?25l[26;9H[?12l[?25h[?25l[A  }[?12l[?25h[?25l[24;9H[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A lo[?12l[?25h[?25l[A[?12l[?25h[?25l[17;9H[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[14;9H[?12l[?25h[?25l[A[?12l[?25h[?25l[A }[?12l[?25h[?25l[A [?12l[?25h[?25l[A[?12l[?25h[?25l[A[C[?12l[?25h[?25l[A[?12l[?25h[?25l[A [?12l[?25h[?25l[A[?12l[?25h[?25l[A[C[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[2;9H[?12l[?25h[?25l7[2;27r8M[1;30r[2;5H}[42m    [49m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;9H(B[0;1m[31mINST_W[39m(B[m(list[hi]);[2;9H[?12l[?25h[?25l7[2;27r8M[1;30r[2;9Hlist[hi] = tmp;[2;9H[?12l[?25h[?25l7[2;27r8M[1;30r[2;9H(B[0;1m[31mINST_W[39m(B[m(list[lo]);[2;9H[?12l[?25h[?25l7[2;27r8M[1;30r[2;9Hlist[lo] = list[hi];[2;9H[?12l[?25h[?25l7[2;27r8M[1;30r[2;9Htmp = list[lo];[2;9H[?12l[?25h[?25l7[2;27r8M[1;30r[2;9H(B[0;1m[31mINST_R[39m(B[m(list[hi]); (B[0;1m[34m//given![2;9H[39m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;9H(B[0;1m[31mINST_R[39m(B[m(list[lo]);[42m       [2;9H[49m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;5H{[?12l[?25h[?25l7[2;27r8M[1;30r[2;5H(B[0;1m[33mif[39m(B[m (lo < hi)[2;9H[?12l[?25h[?25l7[2;27r8M[1;30r[2;5H(B[0;1m[34m// Scan from the right until we find an item smaller than the key[2;9H[39m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;3H{[?12l[?25h[?25l7[2;28r8M[1;30r[2;3H(B[0;1m[33mwhile[39m(B[m (lo < hi)[42m [2;9H[49m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;3H(B[0;1m[34m// the key, and every item to the right of the key is larger than the key[2;9H[39m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;3H(B[0;1m[34m// Now swap items until every item to the left of the key is smaller than[2;9H[39m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;3Hx = list[(lo + hi) / 2];[2;9H[?12l[?25h[?25l7[2;27r8M[1;30r[2;3H(B[0;1m[31mINST_R[39m(B[m(list[(lo + hi) / 2]);[2;9H[?12l[?25h[?25l7[2;27r8M[1;30r[2;3H(B[0;1m[34m// Pick an arbitrary key, say half way through the list[2;9H[39m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;3H[32mint[39m(B[m x, tmp;[9G[?12l[?25h[?25l[3d[?12l[?25h[?25l[4d[?12l[?25h[?25l[5d[?12l[?25h[?25l[6d[?12l[?25h[?25l[7d[?12l[?25h[?25l[8d[?12l[?25h[?25l[9;4H[?12l[?25h[?25l[10;9H[?12l[?25h[?25l[11d[?12l[?25h[?25l[12;6H[?12l[?25h[?25l[13;9H[?12l[?25h[?25l[14d[?12l[?25h[?25l[15d[?12l[?25h[?25l[16d[?12l[?25h[?25l[17d[?12l[?25h[?25l[18d[?12l[?25h[?25l[19d[?12l[?25h[?25l[20d[?12l[?25h[?25l[21d[?12l[?25h[?25l[22;6H[?12l[?25h[?25l[23;9H[?12l[?25h[?25l[24d[?12l[?25h[?25l[25d[?12l[?25h[?25l[26d [?12l[?25h[?25l[27d[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;7H(B[0;1m[33melse[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;7H{[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;9H(B[0;1m[31mINST_R[39m(B[m(list[hi]); (B[0;1m[34m//given![27;9H[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;7H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H(B[0;1m[34m// you may need to edit this section below..[27;9H[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;1H[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H(B[0;1m[34m// Scan from the left until we find an item larger than the key[27;9H[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H(B[0;1m[33mwhile[39m(B[m ( (lo < hi) && (x > list[lo]) )[42m [27;9H[49m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H{[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;7Hlo++;[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H(B[0;1m[34m// Swap the two items we've discovered on the wrong side of the key[27;9H[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5Htmp = list[lo];[42m [27;9H[49m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5Hlist[lo] = list[hi];[42m [27;9H[49m(B[m[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A lo[?12l[?25h[?25l[A[?12l[?25h[?25l7[23;27r8[23dM[1;30r[23;1H[?12l[?25h[?25l[8G[42m[1K [49m(B[m[?12l[?25h[?25l[24d[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[7G lo++;[8G[?12l[?25h[?25l[8G lo++;[9G[?12l[?25h[?25l[A[?12l[?25h[?25l[K[?12l[?25h[?25l[23;28r[28;1H
[1;30r[27;5Hlist[lo] = list[hi];[42m [22;6H[49m(B[m[?12l[?25h[?25l[23d[?12l[?25h[?25l[24d[?12l[?25h[?25l[?12l[?25h[?25l7[24;27r8M[1;30r[24;1H[42m    [25d[49m(B[m}[K[?12l[?25h[?25l[8G[1K }[?12l[?25h[?25l}[K[?12l[?25h[?25l }[?12l[?25h[?25l}[K[?12l[?25h[?25l[8G[1K }[?12l[?25h[?25l}[K[?12l[?25h[?25l[24;28r[28;1H
[1;30r[24;1H    }[27dlist[lo] = list[hi];[42m [24;5H[49m(B[m[?12l[?25h[?25l[A[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25ll[?12l[?25h[?25lo[?12l[?25h[?25l+[?12l[?25h[?25l+[?12l[?25h[?25l;[?12l[?25h[?25l7[24;27r8[24dM[1;30r[24;1H[?12l[?25h[?25l[8G[42m[1K [49m(B[m[?12l[?25h[?25l[1K i[?12l[?25h[?25l(B[0;1m[33mif[39m(B[m[?12l[?25h[?25l([?12l[?25h[?25l*[?12l[?25h[?25l [?12l[?25h[?25ll[?12l[?25h[?25lo[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l <[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l h[?12l[?25h[?25li[?12l[?25h[?25l)[?12l[?25h[?25l{[?12l[?25h[?25l[25d[K[26;5H}[K[27d(B[0;1m[34m// Swap the two items we've discovered on the wrong side of the key[25d[39m(B[m[?12l[?25h[?25l[8G[42m[1K [49m(B[m[?12l[?25h[?25l[16G[42m[1K [49m(B[m[?12l[?25h[?25l[1K I[?12l[?25h[?25l(B[0;1m[31mIN[39m(B[m[?12l[?25h[?25l(B[0;1m[31mS[39m(B[m[?12l[?25h[?25l(B[0;1m[31mT[39m(B[m[?12l[?25h[?25l)[?12l[?25h[?25l_[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l(B[0;1m[31m_[39m(B[m[?12l[?25h[?25l(B[0;1m[31mR[39m(B[m[?12l[?25h[?25l([?12l[?25h[?25ll[?12l[?25h[?25li[?12l[?25h[?25ls[?12l[?25h[?25lt[?12l[?25h[?25l[[?12l[?25h[?25ll[?12l[?25h[?25lo[?12l[?25h[?25l][?12l[?25h[?25l)[?12l[?25h[?25l;[?12l[?25h[?25l[26d[K[27;5H}[K[A[?12l[?25h[?25l}[?12l[?25h[?25l[K[?12l[?25h[?25l[8G[42m[1K [49m(B[m[?12l[?25h[?25l[1K }[?12l[?25h[?25l[27;6H[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H(B[0;1m[34m// Swap the two items we've discovered on the wrong side of the key[27;10H[39m(B[m[?12l[?25h[?25l[A[?12l[?25h[?25l[A   }[?12l[?25h[?25l[A[?12l[?25h[?25l[A[C[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[20;10H[?12l[?25h[?25l[A[?12l[?25h[?25l[20d[?12l[?25h[?25l[21;6H[?12l[?25h[?25l[22;10H[?12l[?25h[?25l[23d[?12l[?25h[?25l[24d[?12l[?25h[?25l[25d}[?12l[?25h[?25l[26;6H[?12l[?25h[?25l[27;10H[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5Htmp = list[lo];[42m [27;10H[49m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5Hlist[lo] = list[hi];[42m [27;10H[49m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5Hlist[hi] = tmp;[27;10H[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;3H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;3H[35mreturn[39m(B[m lo; (B[0;1m[34m// this is where the key is now[27;10H[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;1H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;1H[?12l[?25h[?25l[A}[?12l[?25h[?25l[25;10H[?12l[?25h[?25l[A  }[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[23;20H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m    [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[23;28r[28;1H
[1;30r[22;26H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m    [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[22;28r[28;1H
[1;30r[21;21H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m    [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[21;28r[28;1H
[1;30r[20;72H[?12l[?25h[?25l[19;6H[?12l[?25h[?25l[A   }[?12l[?25h[?25l[17;34H[?12l[?25h[?25l[16;21H[?12l[?25h[?25l[15;14H[?12l[?25h[?25l[14;6H[?12l[?25h[?25l[13;43H[?12l[?25h[?25l[12;68H[?12l[?25h[?25l[A[?12l[?25h[?25l[10;49H[?12l[?25h[?25l[9;6H[?12l[?25h[?25l[A }[?12l[?25h[?25l[7;35H[?12l[?25h[?25l[6;8H[?12l[?25h[?25l[5;11H[?12l[?25h[?25l[A[?12l[?25h[?25l[3;15H[?12l[?25h[?25l[2;8H[?12l[?25h[?25l7[2;28r8M[1;30r[2;7H(B[0;1m[33mif[39m(B[m (lo >= hi)[?12l[?25h[?25l7[2;28r8M[1;30r[2;7Hhi--;[42m     [49m(B[m[?12l[?25h[?25l7[2;28r8M[1;30r[2;5H{[?12l[?25h[?25l7[2;28r8M[1;30r[2;5H(B[0;1m[33mwhile[39m(B[m ( (lo < hi) && (x < list[hi]) )[42m [49m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;5H}[42m    [49m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;9H(B[0;1m[31mINST_W[39m(B[m(list[hi]);[?12l[?25h[?25l7[2;27r8M[1;30r[2;9Hlist[hi] = tmp;[?12l[?25h[?25l7[2;27r8M[1;30r[2;9H(B[0;1m[31mINST_W[39m(B[m(list[lo]);[?12l[?25h[?25l7[2;27r8M[1;30r[2;9Hlist[lo] = list[hi];[?12l[?25h[?25l7[2;27r8M[1;30r[2;9Htmp = list[lo];[?12l[?25h[?25l7[2;27r8M[1;30r[2;9H(B[0;1m[31mINST_R[39m(B[m(list[hi]); (B[0;1m[34m//given![39m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;9H(B[0;1m[31mINST_R[39m(B[m(list[lo]);[42m       [49m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;5H{[?12l[?25h[?25l7[2;27r8M[1;30r[2;5H(B[0;1m[33mif[39m(B[m (lo < hi)[?12l[?25h[?25l7[2;27r8M[1;30r[2;5H(B[0;1m[34m// Scan from the right until we find an item smaller than the key[39m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;3H{[?12l[?25h[?25l7[2;28r8M[1;30r[2;3H(B[0;1m[33mwhile[39m(B[m (lo < hi)[42m [49m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;3H(B[0;1m[34m// the key, and every item to the right of the key is larger than the key[39m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;3H(B[0;1m[34m// Now swap items until every item to the left of the key is smaller than[39m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;3Hx = list[(lo + hi) / 2];[?12l[?25h[?25l7[2;27r8M[1;30r[2;3H(B[0;1m[31mINST_R[39m(B[m(list[(lo + hi) / 2]);[?12l[?25h[?25l7[2;27r8M[1;30r[2;3H(B[0;1m[34m// Pick an arbitrary key, say half way through the list[39m(B[m[?12l[?25h[?25l[3;31H[?12l[?25h[?25l[4;27H[?12l[?25h[?25l[5;72H[?12l[?25h[?25l[6d[?12l[?25h[?25l[7;19H[?12l[?25h[?25l[8;4H[?12l[?25h[?25l[9;70H[?12l[?25h[?25l[10;17H[?12l[?25h[?25l[11;6H[?12l[?25h[?25l[12;33H[?12l[?25h[?25l[13;35H[?12l[?25h[?25l[14;24H[?12l[?25h[?25l[15;29H[?12l[?25h[?25l[16;26H[?12l[?25h[?25l[17d[?12l[?25h[?25l[18d);[?12l[?25h[?25l[19;10H[?12l[?25h[?25l[20;43H[?12l[?25h[?25l[21;6H[?12l[?25h[?25l[22;17H[?12l[?25h[?25l[23;20H[?12l[?25h[?25l[24;8H[?12l[?25h[?25l[25;15H[?12l[?25h[?25l[26;8H[?12l[?25h[?25l[27;11H[?12l[?25h[?25l[A[?12l[?25h[?25l[27;11H[?12l[?25h[?25l[A[?12l[?25h[?25l[25;15H[?12l[?25h[?25l[24;8H[?12l[?25h[?25l[23;20H[?12l[?25h[?25l[24;8H[?12l[?25h[?25l[25;15H[?12l[?25h[?25l[26;8H[?12l[?25h[?25l[27;11H[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;7H{[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;9H(B[0;1m[31mINST_R[39m(B[m(list[hi]); (B[0;1m[34m//given![39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;7H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H(B[0;1m[34m// you may need to edit this section below..[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;1H[?12l[?25h[?25l[26;49H[?12l[?25h[?25l[25;6H[?12l[?25h[?25l[A }[?12l[?25h[?25l[23;35H[?12l[?25h[?25l[24;8H[?12l[?25h[?25l[23;35H[?12l[?25h[?25l[24;8H[?12l[?25h[?25l[42m[1K [49m(B[m [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[24;28r[28;1H
[1;30r[27;5H(B[0;1m[34m// Scan from the left until we find an item larger than the key[23;35H[39m(B[m[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l/[K[?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25lI[K[?12l[?25h[?25l[42m[1K [49m(B[m [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[23;28r[28;1H
[1;30r[27;5H(B[0;1m[33mwhile[39m(B[m ( (lo < hi) && (x > list[lo]) )[42m [22;8H[49m(B[m[?12l[?25h[?25l[42m[1K [49m(B[m [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[22;28r[28;1H
[1;30r[27;5H{[21;11H[?12l[?25h[?25lels[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m[1K [49m(B[m [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[21;28r[28;1H
[1;30r[27;9Hlo++;[20;8H[?12l[?25h[?25l[42m[1K [49m(B[m [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[20;28r[28;1H
[1;30r[27;9H(B[0;1m[33mif[39m(B[m(lo < hi){[19;15H[?12l[?25h[?25l [?12l[?25h[?25l[9Gbrea[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m[1K [49m(B[m [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[19;28r[28;1H
[1;30r[27;17H(B[0;1m[31mINST_R[39m(B[m(list[lo]);[18;8H[?12l[?25h[?25l[42m[1K [49m(B[m [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[18;28r[28;1H
[1;30r[27;9H}[17;20H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25ll[?12l[?25h[?25lo[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l <[?12l[?25h[?25lh[?12l[?25h[?25li[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l h[?12l[?25h[?25li[?12l[?25h[?25l)[?12l[?25h[?25l{[?12l[?25h[?25l7[18;27r8[18dM[1;30r[18;1H[?12l[?25h[?25l[8G[42m[1K [49m(B[m[?12l[?25h[?25l[1K }[?12l[?25h[?25l[42m[1K [49m(B[m [?12l[?25h[?25l[K[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[1K {[?12l[?25h[?25l[42m[1K [49m(B[m [?12l[?25h[?25l[1K }[?12l[?25h[?25l[?12l[?25h[?25l7[18;27r8M[1;30r[18;6H[42m[1K[19d[49m(B[m}[K[?12l[?25h[?25l[A[?12l[?25h[?25l[19d[?12l[?25h[?25l[8G[1K }[?12l[?25h[?25l[A[?12l[?25h[?25l[17;9H[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l [?12l[?25h[?25l[7G  (B[0;1m[33mif[39m(B[m (lo < hi){[17;9H[?12l[?25h[?25l[18d[?12l[?25h[?25l[A  [?12l[?25h[?25l[A[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l  hi--;[9G[?12l[?25h[?25l[17d[?12l[?25h[?25l[18d[?12l[?25h[?25l[42m  [49m(B[m[?12l[?25h[?25l[16G[42m[1K [49m(B[m[?12l[?25h[?25l[1K I[?12l[?25h[?25l(B[0;1m[31mIN[39m(B[m[?12l[?25h[?25l(B[0;1m[31mS[39m(B[m[?12l[?25h[?25l(B[0;1m[31mT[39m(B[m[?12l[?25h[?25l(B[0;1m[31m_[39m(B[m[?12l[?25h[?25l(B[0;1m[31mR[39m(B[m[?12l[?25h[?25l([?12l[?25h[?25ll[?12l[?25h[?25lo[?12l[?25h[?25ls[?12l[?25h[?25lt[?12l[?25h[?25l[[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25ll[?12l[?25h[?25l [?12l[?25h[?25li[?12l[?25h[?25ls[?12l[?25h[?25lt[?12l[?25h[?25l[[?12l[?25h[?25lh[?12l[?25h[?25li[?12l[?25h[?25l][?12l[?25h[?25l)[?12l[?25h[?25l;[?12l[?25h[?25l[19;10H[?12l[?25h[?25l[20;6H[?12l[?25h[?25l[21;34H[?12l[?25h[?25l[22d[?12l[?25h[?25l[23;34H[?12l[?25h[?25l[24d[?12l[?25h[?25l[25;6H[?12l[?25h[?25l[26;14H[?12l[?25h[?25l[27;21H[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;17H(B[0;1m[31mINST_R[39m(B[m(list[lo]);[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;9H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H(B[0;1m[34m// Swap the two items we've discovered on the wrong side of the key[27;34H[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;3H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;3H[35mreturn[39m(B[m lo; (B[0;1m[34m// this is where the key is now[27;34H[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;1H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;1H[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[A}[?12l[?25h[?25l[25;34H[?12l[?25h[?25l[A  }[?12l[?25h[?25l[23;34H[?12l[?25h[?25l[22;6H[?12l[?25h[?25l[A   }[?12l[?25h[?25l[20;34H[?12l[?25h[?25l[19;21H[?12l[?25h[?25l[18;14H[?12l[?25h[?25l[17;6H[?12l[?25h[?25l[16;34H[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[13;34H[?12l[?25h[?25l[12;6H[?12l[?25h[?25l[A   }[?12l[?25h[?25l[10;34H[?12l[?25h[?25l[9;22H[?12l[?25h[?25l[8;17H[?12l[?25h[?25l[7;6H[?12l[?25h[?25l[6;34H[?12l[?25h[?25l[5;10H[?12l[?25h[?25l[4;26H[?12l[?25h[?25l[A[?12l[?25h[?25l[A);[?12l[?25h[?25l7[2;28r8M[1;30r[2;9Hlist[lo] = list[hi];[?12l[?25h[?25l7[2;27r8M[1;30r[2;9Htmp = list[lo];[?12l[?25h[?25l7[2;27r8M[1;30r[2;9H(B[0;1m[31mINST_R[39m(B[m(list[hi]); (B[0;1m[34m//given![39m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;9H(B[0;1m[31mINST_R[39m(B[m(list[lo]);[42m       [49m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;5H{[?12l[?25h[?25l7[2;27r8M[1;30r[2;5H(B[0;1m[33mif[39m(B[m (lo < hi)[?12l[?25h[?25l7[2;27r8M[1;30r[2;5H(B[0;1m[34m// Scan from the right until we find an item smaller than the key[2;34H[39m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;3H{[?12l[?25h[?25l7[2;27r8M[1;30r[2;3H(B[0;1m[33mwhile[39m(B[m (lo < hi)[42m [49m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;3H(B[0;1m[34m// the key, and every item to the right of the key is larger than the key[2;34H[39m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;3H(B[0;1m[34m// Now swap items until every item to the left of the key is smaller than[2;34H[39m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;3Hx = list[(lo + hi) / 2];[?12l[?25h[?25l7[2;27r8M[1;30r[2;3H(B[0;1m[31mINST_R[39m(B[m(list[(lo + hi) / 2]);[?12l[?25h[?25l7[2;28r8M[1;30r[2;3H(B[0;1m[34m// Pick an arbitrary key, say half way through the list[2;34H[39m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;3H[32mint[39m(B[m x, tmp;[?12l[?25h[?25l7[2;27r8M[1;30r[2;1H{[?12l[?25h[?25l7[2;27r8M[1;30r[2;1H[32mint[39m(B[m Partition([32mint[39m(B[m list[], [32mint[39m(B[m lo, [32mint[39m(B[m hi)[2;34H[?12l[?25h[?25l7[2;27r8M[1;30r[2;1H(B[0;1m[34m// Partition function for QuickSort[39m(B[m[?12l[?25h[?25l[28;54H(B[0;7m[ Writing... ](B[m[1;111H(B[0;7m        (B[m[28;52H(B[0;7m[ Wrote 63 lines ](B[m[2;34H[?12l[?25h[?25l[28d[J[30d[?12l[?25h[30;1H[?1049l[23;0;0t[?1l>[?2004lmisma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ cat qsort.cc 
#include <iostream>
#include "inst_legible.h"//For instr

using namespace std;
int Partition(int list[], int lo, int hi);

// QuickSort - this simple version assumes no repeated items in the list
void QSort(int list[], int lo, int hi)
{
  int k;
  if (lo < hi) {
    // Partition the list into two sub-lists
    k = Partition(list, lo, hi);
    // Now every item left of position k is smaller than the item at k,
    // while every item right of position k is larger than the item at k
    QSort(list, lo, k - 1); // sort the sublist to the left of k
    QSort(list, k + 1, hi); // sort the sublist to the right of k
  }
}

// Partition function for QuickSort
int Partition(int list[], int lo, int hi)
{
  int x, tmp;
  // Pick an arbitrary key, say half way through the list
  INST_R(list[(lo + hi) / 2]);
  x = list[(lo + hi) / 2];
  // Now swap items until every item to the left of the key is smaller than
  // the key, and every item to the right of the key is larger than the key
  while (lo < hi) 
  {
    // Scan from the right until we find an item smaller than the key
    if (lo < hi)
    {
        INST_R(list[lo]);	
	INST_R(list[hi]); //given!
	tmp = list[lo];
	list[lo] = list[hi];
	INST_W(list[lo]);
	list[hi] = tmp;
	INST_W(list[hi]);
    }    
    while ( (lo < hi) && (x < list[hi]) ) 
    {
      	hi--;	
      	if (lo < hi){
      		INST_R(list[hi]);
	}
    }
    // you may need to edit this section below..

    // Scan from the left until we find an item larger than the key
    while ( (lo < hi) && (x > list[lo]) ) 
    {
        lo++;
	if(lo < hi){
		INST_R(list[lo]);
	}
    }
    // Swap the two items we've discovered on the wrong side of the key
  }
  return lo; // this is where the key is now
}
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ cat qsort.cc [1@nano[C[C[C[C[C[C[C[C[C[C
[?2004h[?1049h[22;0;0t[1;30r(B[m[4l[?7h[39;49m[?1h=[?1h=[?25l[39;49m(B[m[H[2J[28;54H(B[0;7m[ Reading... ](B[m[28;38H(B[0;7m[ Read 63 lines (Converted from DOS format) ](B[m[H(B[0;7m  GNU nano 4.8                                            qsort.cc                                                      [1;119H(B[m[29d(B[0;7m^G(B[m Get Help    (B[0;7m^O(B[m Write Out   (B[0;7m^W(B[m Where Is    (B[0;7m^K(B[m Cut Text    (B[0;7m^J(B[m Justify     (B[0;7m^C(B[m Cur Pos     (B[0;7mM-U(B[m Undo[106G(B[0;7mM-A(B[m Mark Text[30d(B[0;7m^X(B[m Exit[30;16H(B[0;7m^R(B[m Read File   (B[0;7m^\(B[m Replace     (B[0;7m^U(B[m Paste Text  (B[0;7m^T(B[m To Spell    (B[0;7m^_(B[m Go To Line  (B[0;7mM-E(B[m Redo[106G(B[0;7mM-6(B[m Copy Text[28d[2d(B[0;1m[36m#include[33m <iostream>[3d[36m#include[39m(B[m (B[0;1m[33m"inst_legible.h"[34m//For instr[5d(B[0m[32musing[39m(B[m [32mnamespace[39m(B[m std;[6d[32mint[39m(B[m Partition([32mint[39m(B[m list[], [32mint[39m(B[m lo, [32mint[39m(B[m hi);[8d(B[0;1m[34m// QuickSort - this simple version assumes no repeated items in the list[9d(B[0m[32mvoid[39m(B[m QSort([32mint[39m(B[m list[], [32mint[39m(B[m lo, [32mint[39m(B[m hi)[10d{[11d [32mint[39m(B[m k;[12;3H(B[0;1m[33mif[39m(B[m (lo < hi) {[13;5H(B[0;1m[34m// Partition the list into two sub-lists[14;5H[39m(B[mk = Partition(list, lo, hi);[15;5H(B[0;1m[34m// Now every item left of position k is smaller than the item at k,[16;5H// while every item right of position k is larger than the item at k[17;5H[39m(B[mQSort(list, lo, k - 1); (B[0;1m[34m// sort the sublist to the left of k[18;5H[39m(B[mQSort(list, k + 1, hi); (B[0;1m[34m// sort the sublist to the right of k[19;3H[39m(B[m}[20d}[22d(B[0;1m[34m// Partition function for QuickSort[23d(B[0m[32mint[39m(B[m Partition([32mint[39m(B[m list[], [32mint[39m(B[m lo, [32mint[39m(B[m hi)[24d{[25d [32mint[39m(B[m x, tmp;[26;3H(B[0;1m[34m// Pick an arbitrary key, say half way through the list[27;3H[31mINST_R[39m(B[m(list[(lo + hi) / 2]);[2d[?12l[?25h[?25l[3d[?12l[?25h[?25l[4d[?12l[?25h[?25l[5d[?12l[?25h[?25l[6d[?12l[?25h[?25l[7d[?12l[?25h[?25l[8d[?12l[?25h[?25l[9d[?12l[?25h[?25l[10d[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[6;43H[?12l[?25h[?25l[1;111H(B[0;7mModified(B[m[6;42H [?12l[?25h[?25l{[?12l[?25h[?25l7[7;27r8[7dM[1;30r[7;1H[?12l[?25h[?25l}[?12l[?25h[?25l[?12l[?25h[?25l7[7;27r8M[1;30r[8;1H[?12l[?25h[?25l[A[?12l[?25h[?25l[8d[?12l[?25h[?25l[9d[?12l[?25h[?25l[9;27r[27;1H
[1;30r[27;3H(B[0;1m[34m// Pick an arbitrary key, say half way through the list[8;2H[39m(B[m[?12l[?25h[?25l[K[?12l[?25h[?25l[7;27r[27;1H
[1;30r[27;3H(B[0;1m[31mINST_R[39m(B[m(list[(lo + hi) / 2]);[7d[?12l[?25h[?25l[7;27r[27;1H
[1;30r[27;3Hx = list[(lo + hi) / 2];[6;43H[?12l[?25h[?25l [28d[K[6;42H[?12l[?25h[?25l;[?12l[?25h[?25l[7d[?12l[?25h[?25l[8;39H[?12l[?25h[?25l[9d{[?12l[?25h[?25l[10;9H[?12l[?25h[?25l[11;17H[?12l[?25h[?25l[12;43H[?12l[?25h[?25l[13;33H[?12l[?25h[?25l[14;43H[?12l[?25h[?25l[15d[?12l[?25h[?25l[16d[?12l[?25h[?25l[17d[?12l[?25h[?25l[18;4H[?12l[?25h[?25l[19d[?12l[?25h[?25l[20d[?12l[?25h[?25l[21;36H[?12l[?25h[?25l[22;42H[?12l[?25h[?25l[23d{[?12l[?25h[?25l[24;14H[?12l[?25h[?25l[25;43H[?12l[?25h[?25l[26;31H[?12l[?25h[?25l[27;27H[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;3H(B[0;1m[34m// Now swap items until every item to the left of the key is smaller than[27;43H[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;3H(B[0;1m[34m// the key, and every item to the right of the key is larger than the key[27;43H[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;3H(B[0;1m[33mwhile[39m(B[m (lo < hi)[42m [49m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;3H{[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H(B[0;1m[34m// Scan from the right until we find an item smaller than the key[27;43H[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H(B[0;1m[33mif[39m(B[m (lo < hi)[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H{[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;9H(B[0;1m[31mINST_R[39m(B[m(list[lo]);[42m       [49m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;9H(B[0;1m[31mINST_R[39m(B[m(list[hi]); (B[0;1m[34m//given![39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;9Htmp = list[lo];[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;9Hlist[lo] = list[hi];[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;9H(B[0;1m[31mINST_W[39m(B[m(list[lo]);[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;9Hlist[hi] = tmp;[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;9H(B[0;1m[31mINST_W[39m(B[m(list[hi]);[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H}[42m    [49m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H(B[0;1m[33mwhile[39m(B[m ( (lo < hi) && (x < list[hi]) )[42m [49m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H{[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;9Hhi--;[42m   [49m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;9H(B[0;1m[33mif[39m(B[m (lo < hi){[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;17H(B[0;1m[31mINST_R[39m(B[m(list[hi]);[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;9H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H(B[0;1m[34m// you may need to edit this section below..[43G[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;1H[?12l[?25h[?25l[26;43H[?12l[?25h[?25l[25;6H[?12l[?25h[?25l(B[0;7m    }[24;10H(B[m[?12l[?25h[?25l(B[0;7m        }[23;34H(B[m[?12l[?25h[?25l(B[0;7m                INST_R(list[hi]);[22;22H(B[m[?12l[?25h[?25l(B[0;7m        if (lo < hi){[21;17H(B[m[?12l[?25h[?25l(B[0;7m        hi--;   [20;6H(B[m[?12l[?25h[?25l(B[0;7m    {[19;43H(B[m[?12l[?25h[?25l(B[0;7m    while ( (lo < hi) && (x < list[hi]) ) [18;10H(B[m[?12l[?25h[?25l(B[0;7m (B[m[?12l[?25h[?25l(B[0;7m (B[m[?12l[?25h[?25l(B[0;7m (B[m[?12l[?25h[?25l(B[0;7m (B[m[?12l[?25h[?25l(B[0;7m}(B[m[?12l[?25h[?25l}[?12l[?25h[?25l[K[19d    (B[0;1m[34m// you may need to edit this section below..[20d[39m(B[m[K[21d    (B[0;1m[34m// Scan from the left until we find an item larger than the key[22d[39m(B[m    (B[0;1m[33mwhile[39m(B[m ( (lo < hi) && (x > list[lo]) )[42m [23d[49m(B[m    {[K[24d  [1K lo++;[25;8H[1K (B[0;1m[33mif[39m(B[m(lo < hi){[26;16H[1K (B[0;1m[31mINST_R[39m(B[m(list[lo]);[K[27;9H}[18;6H[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[11;6H[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l7[8;27r8[8dM[1;30r[8;1H[?12l[?25h[?25l[5;28r[5;1H[7T[1;30r[2;3H  (B[0;1m[34m// you may need to edit this section below..[3d[39m(B[m[K[4d    (B[0;1m[34m// Scan from the left until we find an item larger than the key[39m(B[m[K[5;5H(B[0;1m[33mwhile[39m(B[m ( (lo < hi) && (x > list[lo]) )[6;5H{[7;9Hlo++;[8;9H(B[0;1m[33mif[39m(B[m(lo < hi){[9;17H(B[0;1m[31mINST_R[39m(B[m(list[lo]);[10;9H}[11;5H}[12;3H  (B[0;1m[34m// Swap the two items we've discovered on the wrong side of[39m(B[m[4P[13;3H}[K[14d[35mreturn[39m(B[m lo; (B[0;1m[34m// this is where the key is now[15d[39m(B[m}[?12l[?25h[?25l[?12l[?25h[?25l }[?12l[?25h[?25l  }[?12l[?25h[?25l   }[?12l[?25h[?25l    }[?12l[?25h[?25l}[K[?12l[?25h[?25l}[K[?12l[?25h[?25l}[K[?12l[?25h[?25l}[K[?12l[?25h[?25l[15;28r[28;1H
[1;30r[14;45H(B[0;1m[34m}[39m(B[m[?12l[?25h[?25l7[15;28r8[15dM[1;30r[14;45H [15d}[?12l[?25h[?25l[8G[1K }[?12l[?25h[?25l}[K[?12l[?25h[?25l[8G[1K }[?12l[?25h[?25l}[K[?12l[?25h[?25l[A[?12l[?25h[?25l [?12l[?25h[?25l[15d[?12l[?25h[?25l[A(B[0;7m return lo; // this is where the key is now[15d}[A(B[m[?12l[?25h[?25l [?12l[?25h[?25l[A(B[0;7m}[14d  [A(B[m[?12l[?25h[?25l}[?12l[?25h[?25l[14;28r[28;1H[2S[1;30r[27;5H(B[0;1m[34m// Scan from the left until we find an item larger than the key[13;4H[39m(B[m[?12l[?25h[?25l[14d[?12l[?25h[?25l[15d[?12l[?25h[?25l[16d[?12l[?25h[?25l[17d[?12l[?25h[?25l[18d[?12l[?25h[?25l[19d[?12l[?25h[?25l[20d[?12l[?25h[?25l[21d[?12l[?25h[?25l[22d[?12l[?25h[?25l[23d[?12l[?25h[?25l[24;4H[?12l[?25h[?25l[25d[?12l[?25h[?25l[26d[?12l[?25h[?25l[27;4H[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H(B[0;1m[33mwhile[39m(B[m ( (lo < hi) && (x > list[lo]) )[42m [4G[49m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H{[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;9Hlo++;   [?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;9H(B[0;1m[33mif[39m(B[m(lo < hi){[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;17H(B[0;1m[31mINST_R[39m(B[m(list[lo]);[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;9H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;5H(B[0;1m[34m// Swap the two items we've discovered on the wrong side of the key[4G[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;3H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;3H[35mreturn[39m(B[m lo; (B[0;1m[34m// this is where the key is now[4G[39m(B[m[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;1H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;1H[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[A}[?12l[?25h[?25l[25;4H[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A   [?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A   [?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A   [?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[2;28r[2;1HM[1;30r[2;3H}[?12l[?25h[?25l7[2;27r8M[1;30r[2;5H(B[0;1m[34m// Swap the two items we've discovered on the wrong side of the key[4G[39m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;5H}[?12l[?25h[?25l7[2;27r8M[1;30r[2;9H}   [?12l[?25h[?25l7[2;27r8M[1;30r[2;17H(B[0;1m[31mINST_R[39m(B[m(list[lo]);   [?12l[?25h[?25l7[2;27r8M[1;30r[2;9H(B[0;1m[33mif[39m(B[m(lo < hi){   [?12l[?25h[?25l7[2;27r8M[1;30r[2;9Hlo++;   [?12l[?25h[?25l7[2;27r8M[1;30r[2;5H{[?12l[?25h[?25l7[2;27r8M[1;30r[2;5H(B[0;1m[33mwhile[39m(B[m ( (lo < hi) && (x > list[lo]) )   [?12l[?25h[?25l7[2;27r8M[1;30r[2;5H(B[0;1m[34m// Scan from the left until we find an item larger than the key[4G[39m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;1H[?12l[?25h[?25l7[2;27r8M[1;30r[2;5H(B[0;1m[34m// you may need to edit this section below..[4G[39m(B[m[?12l[?25h[?25l7[2;27r8M[1;30r[2;5H}[?12l[?25h[?25l7[2;28r8M[1;30r[2;9H}   [?12l[?25h[?25l7[2;27r8M[1;30r[2;17H(B[0;1m[31mINST_R[39m(B[m(list[hi]);   [?12l[?25h[?25l7[2;27r8M[1;30r[2;9H(B[0;1m[33mif[39m(B[m (lo < hi){   [?12l[?25h[?25l[3d[?12l[?25h[?25l[4d[?12l[?25h[?25l[5d[?12l[?25h[?25l[6d[?12l[?25h[?25l[7d[?12l[?25h[?25l[8;4H[?12l[?25h[?25l[9d[?12l[?25h[?25l[10d[?12l[?25h[?25l[11d[?12l[?25h[?25l[12d[?12l[?25h[?25l[13d[?12l[?25h[?25l[14d[?12l[?25h[?25l[15d[?12l[?25h[?25l[16d[?12l[?25h[?25l[?12l[?25h[?25l[17d[?12l[?25h[?25l[8G[1K }[?12l[?25h[?25l}[?12l[?25h[?25l[?12l[?25h[?25l  }[K[?12l[?25h[?25l   }[?12l[?25h[?25l    }[?12l[?25h[?25l}[?12l[?25h[?25l7[18;27r8[18dM[1;30r[18;1H[?12l[?25h[?25l[2;16r[16;1H[4S[1;30r[14;28r[28;1H[3S[1;30r[13;3H}[14d[35mreturn[39m(B[m lo; (B[0;1m[34m// this is where the key is now[15d[39m(B[m}[25;9H(B[0;1m[31mINST_W[39m(B[m(list[hi]);[26;5H}[27d(B[0;1m[34m// you may need to edit this section below..[15;2H[39m(B[m[?12l[?25h[?25l[?12l[?25h[?25l[8G[1K }[?12l[?25h[?25l[?12l[?25h[?25l[A[?12l[?25h[?25l [?12l[?25h[?25l[9G[1K [35mreturn[39m(B[m lo; (B[0;1m[34m// this is where the key is now[14;9H[39m(B[m[?12l[?25h[?25l [?12l[?25h[?25l[A[?12l[?25h[?25l[9G[1K }[?12l[?25h[?25l [?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l [?12l[?25h[?25l[10G[1K }[?12l[?25h[?25l[A[?12l[?25h[?25l[16G[1K }[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[6;6H[?12l[?25h[?25l[?12l[?25h[?25l[7d[?12l[?25h[?25l[A[?12l[?25h[?25l        {[?12l[?25h[?25l{[K[?12l[?25h[?25l[7d[?12l[?25h[?25l [?12l[?25h[?25l[8d[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l([?12l[?25h[?25ll[?12l[?25h[?25lo[?12l[?25h[?25l [?12l[?25h[?25l[9d[?12l[?25h[?25l [?12l[?25h[?25l[10;9H[?12l[?25h[?25l[10;17H[?12l[?25h[?25l[11;12H[?12l[?25h[?25l[?12l[?25h[?25l}[K[?12l[?25h[?25l}[K[?12l[?25h[?25l  }[K[?12l[?25h[?25l}[K[?12l[?25h[?25l}[K[?12l[?25h[?25l[11;28r[28;1H
[1;30r[10;18H}[?12l[?25h[?25l7[11;28r8[11dM[1;30r[10;18H [11d}[?12l[?25h[?25l[8G[1K }[?12l[?25h[?25l}[K[?12l[?25h[?25l }[?12l[?25h[?25l  }[?12l[?25h[?25l   }[?12l[?25h[?25l    }[?12l[?25h[?25l[A[?12l[?25h[?25l    }[K   [?12l[?25h[?25l[11d[?12l[?25h[?25l[12d[?12l[?25h[?25l [?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[13d [?12l[?25h[?25l[9G[?12l[?25h[?25l[28d(B[0;7mSave modified buffer?                                                                                                   [29;1H Y(B[m Yes[K[30d(B[0;7m N(B[m No  [30;16H (B[0;7m^C(B[m Cancel[K[28;23H[?12l[?25h[?25l[J[30d[?12l[?25h[30;1H[?1049l[23;0;0t[?1l>[?2004lmisma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ rm qsort.cc
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ nano qsort.cc
[?2004h[?1049h[22;0;0t[1;30r(B[m[4l[?7h[39;49m[?1h=[?1h=[?25l[39;49m(B[m[H[2J[28;55H(B[0;7m[ New File ](B[m[H(B[0;7m  GNU nano 4.8                                            qsort.cc                                                      [1;119H(B[m[29d(B[0;7m^G(B[m Get Help    (B[0;7m^O(B[m Write Out   (B[0;7m^W(B[m Where Is    (B[0;7m^K(B[m Cut Text    (B[0;7m^J(B[m Justify     (B[0;7m^C(B[m Cur Pos     (B[0;7mM-U(B[m Undo[106G(B[0;7mM-A(B[m Mark Text[30d(B[0;7m^X(B[m Exit[30;16H(B[0;7m^R(B[m Read File   (B[0;7m^\(B[m Replace     (B[0;7m^U(B[m Paste Text  (B[0;7m^T(B[m To Spell    (B[0;7m^_(B[m Go To Line  (B[0;7mM-E(B[m Redo[106G(B[0;7mM-6(B[m Copy Text[28d[2d[39;49m(B[m[?12l[?25h[?25l[28d[K[1;111H(B[0;7mModified(B[m[2;9Htmp = list[lo];[3;9Hlist[lo] = list[hi];[4;9H(B[0;1m[31mINST_W[39m(B[m(list[lo]);[5;9Hlist[hi] = tmp;[6;9H(B[0;1m[31mINST_W[39m(B[m(list[hi]);[7;5H}[8d[42m    [9d(B[0;1m[34m// you may need to edit this section below..[11d(B[0m[42m    [12d    [13d[49m(B[m}[14d[35mreturn[39m(B[m lo; (B[0;1m[34m// this is where the key is now[15d[39m(B[m}[?12l[?25h[?25l[28;54H(B[0;7m[ Writing... ](B[m[1;111H(B[0;7m        (B[m[28;52H(B[0;7m[ Wrote 66 lines ](B[m[15d}[?12l[?25h[?25l[28d[J[30d[?12l[?25h[30;1H[?1049l[23;0;0t[?1l>[?2004lmisma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ cat w[Kqsort.cc 
#include <iostream>
#include "inst_legible.h"//For instr

using namespace std;
int Partition(int list[], int lo, int hi);

// QuickSort - this simple version assumes no repeated items in the list
void QSort(int list[], int lo, int hi)
{
  int k;
  if (lo < hi) {
    // Partition the list into two sub-lists
    k = Partition(list, lo, hi);
    // Now every item left of position k is smaller than the item at k,
    // while every item right of position k is larger than the item at k
    QSort(list, lo, k - 1); // sort the sublist to the left of k
    QSort(list, k + 1, hi); // sort the sublist to the right of k
  }
}

// Partition function for QuickSort
int Partition(int list[], int lo, int hi)
{
  int x, tmp;
  // Pick an arbitrary key, say half way through the list
  INST_R(list[(lo + hi) / 2]);
  x = list[(lo + hi) / 2];
  // Now swap items until every item to the left of the key is smaller than
  // the key, and every item to the right of the key is larger than the key
  while (lo < hi)
  {
    //Swap the two items we've discovered on the wrong side of the key
    while ( (lo < hi) && (x < list[hi]) )
    {
        hi--;
        if (lo < hi){
                INST_R(list[hi]);
        }
    }
    // Scan from the left until we find an item larger than the key
    while ( (lo < hi) && (x > list[lo]) )
    {
        lo++;
        if(lo < hi){
                INST_R(list[lo]);
        }
    }
    // Scan from the right until we find an item smaller than the key
    if (lo < hi)
    {
        INST_R(list[lo]);
        INST_R(list[hi]); //given!
        tmp = list[lo];
        list[lo] = list[hi];
        INST_W(list[lo]);
        list[hi] = tmp;
        INST_W(list[hi]);
    }
    
    // you may need to edit this section below..

    
    
  }
  return lo; // this is where the key is now
}
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ nano xsort.cc 
[?2004h[?1049h[22;0;0t[1;30r(B[m[4l[?7h[39;49m[?1h=[?1h=[?25l[39;49m(B[m[H[2J[28;54H(B[0;7m[ Reading... ](B[m[28;38H(B[0;7m[ Read 26 lines (Converted from DOS format) ](B[m[H(B[0;7m  GNU nano 4.8                                            xsort.cc                                                      [1;119H(B[m[29d(B[0;7m^G(B[m Get Help    (B[0;7m^O(B[m Write Out   (B[0;7m^W(B[m Where Is    (B[0;7m^K(B[m Cut Text    (B[0;7m^J(B[m Justify     (B[0;7m^C(B[m Cur Pos     (B[0;7mM-U(B[m Undo[106G(B[0;7mM-A(B[m Mark Text[30d(B[0;7m^X(B[m Exit[30;16H(B[0;7m^R(B[m Read File   (B[0;7m^\(B[m Replace     (B[0;7m^U(B[m Paste Text  (B[0;7m^T(B[m To Spell    (B[0;7m^_(B[m Go To Line  (B[0;7mM-E(B[m Redo[106G(B[0;7mM-6(B[m Copy Text[28d[2d(B[0;1m[36m#include[33m <iostream>[3d(B[0m[32musing[39m(B[m [32mnamespace[39m(B[m std;[5d[32mvoid[39m(B[m XSort([32mint[39m(B[m list[], [32mint[39m(B[m n)[6;3H(B[0;1m[34m// Exchange sort[7d[39m(B[m{[8d [32mint[39m(B[m min, tmp, i, j, min_j;[9;3H(B[0;1m[34m// Scan the list from the left to the right[10;3H[33mfor[39m(B[m (i = 0; i < n - 1; i++) {[11;5H(B[0;1m[34m// Remember the item at position i[12;5H[39m(B[mmin = list[i];[42m [13;5H[49m(B[mmin_j = i;[14;5H(B[0;1m[34m// Check the list to the right of position i for any smaller items[15;5H[33mfor[39m(B[m (j = i + 1; j < n; j++) {[16;7H(B[0;1m[33mif[39m(B[m (list[j] < min) {[17;9H(B[0;1m[34m// Remember where this smaller item is[18;9H[39m(B[mmin = list[j];[42m [19;9H[49m(B[mmin_j = j;[20;7H}[21;5H}[22d(B[0;1m[34m// Swap the item at position i with the smallest item found to the right[23;5H[39m(B[mtmp = list[min_j];[42m [24;5H[49m(B[mlist[min_j] = list[i];[25;5Hlist[i] = tmp;[26;3H}[27d}[2d[?12l[?25h[?25l[3d[?12l[?25h[?25l[4d[?12l[?25h[?25l[5d[?12l[?25h[?25l[6d[?12l[?25h[?25l[7d[?12l[?25h[?25l[8d[?12l[?25h[?25l[9d[?12l[?25h[?25l[10d[?12l[?25h[?25l[11d[?12l[?25h[?25l[12d[?12l[?25h[?25l[11;39H[?12l[?25h[?25l[1;111H(B[0;7mModified(B[m[12;27r[12;1HM[1;30r[12;1H[?12l[?25h[?25l[8G[42m[1K [49m(B[m[?12l[?25h[?25l[K[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l    I[?12l[?25h[?25l(B[0;1m[31mIN[39m(B[m[?12l[?25h[?25l(B[0;1m[31mS[39m(B[m[?12l[?25h[?25l(B[0;1m[31mT[39m(B[m[?12l[?25h[?25l(B[0;1m[31m_[39m(B[m[?12l[?25h[?25l(B[0;1m[31mR[39m(B[m[?12l[?25h[?25l([?12l[?25h[?25ll[28d[K[12;13H[?12l[?25h[?25li[?12l[?25h[?25ls[?12l[?25h[?25lt[?12l[?25h[?25l[[?12l[?25h[?25li[?12l[?25h[?25l][?12l[?25h[?25l)[?12l[?25h[?25l_[?12l[?25h[?25l [?12l[?25h[?25l;[?12l[?25h[?25l[13d[?12l[?25h[?25l[14;15H[?12l[?25h[?25l[15;21H[?12l[?25h[?25l[16d[?12l[?25h[?25lj[?12l[?25h[?25l [?12l[?25h[?25l<[?12l[?25h[?25l [?12l[?25h[?25ln[?12l[?25h[?25l;[?12l[?25h[?25l [?12l[?25h[?25lj[?12l[?25h[?25l+[?12l[?25h[?25l+[?12l[?25h[?25l)[?12l[?25h[?25l [?12l[?25h[?25l{[?12l[?25h[?25l7[17;27r8[17dM[1;30r[17;1H[?12l[?25h[?25l[8G[42m[1K [49m(B[m[?12l[?25h[?25l[K[?12l[?25h[?25l[8G[42m[1K [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[1K i[?12l[?25h[?25ln[?12l[?25h[?25l [?12l[?25h[?25l[42m[1K [49m(B[m [?12l[?25h[?25l[1K I[?12l[?25h[?25l(B[0;1m[31mIN[39m(B[m[?12l[?25h[?25l(B[0;1m[31mS[39m(B[m[?12l[?25h[?25l(B[0;1m[31mT[39m(B[m[?12l[?25h[?25l)[?12l[?25h[?25l [?12l[?25h[?25l(B[0;1m[31m_[39m(B[m[?12l[?25h[?25l(B[0;1m[31mR[39m(B[m[?12l[?25h[?25l([?12l[?25h[?25ll[?12l[?25h[?25li[?12l[?25h[?25ls[?12l[?25h[?25lt[?12l[?25h[?25l[[?12l[?25h[?25lj[?12l[?25h[?25l][?12l[?25h[?25l[[?12l[?25h[?25l [?12l[?25h[?25l)[?12l[?25h[?25l;[?12l[?25h[?25l[18d[?12l[?25h[?25l[19d[?12l[?25h[?25l[20d[?12l[?25h[?25l[21;19H[?12l[?25h[?25l[22;8H[?12l[?25h[?25l[23d[?12l[?25h[?25l[24;23H[?12l[?25h[?25l[25d[?12l[?25h[?25l[26d[?12l[?25h[?25l[27;19H[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;3H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;1H}[?12l[?25h[?25l[A }[?12l[?25h[?25l[25;19H[?12l[?25h[?25l[Alist(B[0;7m[i];[25d    list[i] = tmp;[24;23H(B[m[?12l[?25h[?25l[A(B[0;7m [24d    list[min_j] = list[A(B[m[?12l[?25h[?25l[A(B[0;7mt position i with the smallest item found to the right[23d    tmp = list[min_j];[A(B[m[?12l[?25h[?25l(B[0;1m[34mt[39m(B[m[?12l[?25h[?25l(B[0;1m[34m [39m(B[m[?12l[?25h[?25l(B[0;7m (B[m[?12l[?25h[?25l(B[0;7mt(B[m[?12l[?25h[?25l(B[0;1m[34mt[39m(B[m[?12l[?25h[?25l(B[0;1m[34m [39m(B[m[?12l[?25h[?25l(B[0;1m[34mp[39m(B[m[?12l[?25h[?25l(B[0;1m[34mo[39m(B[m[?12l[?25h[?25l(B[0;1m[34ms[39m(B[m[?12l[?25h[?25l(B[0;1m[34mi[39m(B[m[?12l[?25h[?25l(B[0;1m[34mt[39m(B[m[?12l[?25h[?25l(B[0;1m[34mi[39m(B[m[?12l[?25h[?25l(B[0;1m[34mo[39m(B[m[?12l[?25h[?25l(B[0;1m[34mn[39m(B[m[?12l[?25h[?25l(B[0;1m[34m [39m(B[m[?12l[?25h[?25l(B[0;1m[34mi[39m(B[m[?12l[?25h[?25l(B[0;1m[34m [39m(B[m[?12l[?25h[?25l(B[0;1m[34mw[39m(B[m[?12l[?25h[?25l(B[0;1m[34mi[39m(B[m[?12l[?25h[?25l(B[0;1m[34mt[39m(B[m[?12l[?25h[?25l(B[0;1m[34mh[39m(B[m[?12l[?25h[?25l(B[0;1m[34m [39m(B[m[?12l[?25h[?25l(B[0;1m[34mt[39m(B[m[?12l[?25h[?25l(B[0;1m[34mh[39m(B[m[?12l[?25h[?25l(B[0;1m[34me[39m(B[m[?12l[?25h[?25l(B[0;1m[34m [39m(B[m[?12l[?25h[?25l(B[0;1m[34ms[39m(B[m[?12l[?25h[?25l(B[0;1m[34mm[39m(B[m[?12l[?25h[?25l(B[0;1m[34ma[39m(B[m[?12l[?25h[?25l(B[0;1m[34ml[39m(B[m[?12l[?25h[?25l(B[0;1m[34ml[39m(B[m[?12l[?25h[?25l(B[0;1m[34me[39m(B[m[?12l[?25h[?25l(B[0;1m[34ms[39m(B[m[?12l[?25h[?25l(B[0;1m[34mt[39m(B[m[?12l[?25h[?25l(B[0;1m[34m [39m(B[m[?12l[?25h[?25l(B[0;1m[34mi[39m(B[m[?12l[?25h[?25l(B[0;1m[34mt[39m(B[m[?12l[?25h[?25l(B[0;1m[34me[39m(B[m[?12l[?25h[?25l(B[0;1m[34mm[39m(B[m[?12l[?25h[?25l(B[0;1m[34m [39m(B[m[?12l[?25h[?25l(B[0;1m[34mf[39m(B[m[?12l[?25h[?25l(B[0;1m[34mo[39m(B[m[?12l[?25h[?25l(B[0;1m[34mu[39m(B[m[?12l[?25h[?25l(B[0;1m[34mn[39m(B[m[?12l[?25h[?25l(B[0;1m[34md[39m(B[m[?12l[?25h[?25l(B[0;1m[34m [39m(B[m[?12l[?25h[?25l(B[0;1m[34mt[39m(B[m[?12l[?25h[?25l(B[0;1m[34mo[39m(B[m[?12l[?25h[?25l(B[0;1m[34m [39m(B[m[?12l[?25h[?25l(B[0;1m[34mt[39m(B[m[?12l[?25h[?25l(B[0;1m[34mh[39m(B[m[?12l[?25h[?25l(B[0;1m[34me[39m(B[m[?12l[?25h[?25l(B[0;1m[34m [39m(B[m[?12l[?25h[?25l(B[0;1m[34mr[39m(B[m[?12l[?25h[?25l(B[0;1m[34mi[39m(B[m[?12l[?25h[?25l(B[0;1m[34mg[39m(B[m[?12l[?25h[?25l(B[0;1m[34mh[39m(B[m[?12l[?25h[?25l(B[0;1m[34mt[39m(B[m[?12l[?25h[?25l[23d[?12l[?25h[?25l[23;28r[28;1H
[1;30r[22;77H(B[0;1m[34m    tmp = list[min_j];(B[0m[42m [23d[49m(B[m    list[min_j] = list[i];[24d    list[i] = tmp;[22;77H[?12l[?25h[?25l7[23;28r8[23dM[1;30r[22;77H[K[23;5Htmp = list[min_j];[42m [49m(B[m[?12l[?25h[?25l(B[0;7m    tmp = list[min_j]; [24d(B[m[?12l[?25h[?25l(B[0;7m    list[min_j] = list[i];[25d(B[m[?12l[?25h[?25l(B[0;7m    list[i] = tmp;[26d(B[m[?12l[?25h[?25l[24;28r[28;1H
[1;30r[23;1H    tmp = list[min_j];[42m [24d[49m(B[m    list[min_j] = list[i];[25d    list[i] = tmp;  }[?12l[?25h[?25l   [26d  }[27d}[A[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[A[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25ll[?12l[?25h[?25li[?12l[?25h[?25ls[?12l[?25h[?25lt[?12l[?25h[?25l[[?12l[?25h[?25li[?12l[?25h[?25l][?12l[?25h[?25l [?12l[?25h[?25l=[?12l[?25h[?25l [?12l[?25h[?25lt[?12l[?25h[?25lm[?12l[?25h[?25lp[?12l[?25h[?25l;[?12l[?25h[?25l[26d[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[25;19H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m    [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[25;28r[28;1H
[1;30r[24;27H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m    [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[K[?12l[?25h[?25l[24;28r[28;1H
[1;30r[23;24H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m    [49m(B[m[K[?12l[?25h[?25l    i[?12l[?25h[?25l(B[0;1m[33mif[39m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l *[?12l[?25h[?25l([?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l ([?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l [?12l[?25h[?25li[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l ![?12l[?25h[?25l=[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l m[?12l[?25h[?25li[?12l[?25h[?25ln[?12l[?25h[?25l_[?12l[?25h[?25lj[?12l[?25h[?25l)[?12l[?25h[?25l{[?12l[?25h[?25l7[24;28r8[24dM[1;30r[24;1H[?12l[?25h[?25l[8G[42m[1K [49m(B[m[?12l[?25h[?25l[K[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l[42m [49m(B[m[?12l[?25h[?25l    }[?12l[?25h[?25l[?12l[?25h[?25l7[24;28r8M[1;30r[24;1H[42m    [25d[49m(B[m}[K[?12l[?25h[?25l[8G[1K }[?12l[?25h[?25l}[K[?12l[?25h[?25l }[?12l[?25h[?25l  }[?12l[?25h[?25l}[K[?12l[?25h[?25l}[K[?12l[?25h[?25l[24;28r[28;1H
[1;30r[24;1H    }[?12l[?25h[?25l7[24;28r8M[1;30r[24;1H[42m    [25d[49m(B[m}[K[?12l[?25h[?25l[8G[1K }[?12l[?25h[?25l[A[?12l[?25h[?25l[?12l[?25h[?25l[A[?12l[?25h[?25l [?12l[?25h[?25l        (B[0;1m[33mif[39m(B[m (i != min_j){[23;9H[?12l[?25h[?25l[24;5H[?12l[?25h[?25l[25d[?12l[?25h[?25l[24;5H[?12l[?25h[?25l[42m    [49m(B[m[?12l[?25h[?25l[16G[42m[1K [49m(B[m[?12l[?25h[?25l[24;9H[K[?12l[?25h[?25l[16G[42m[1K [49m(B[m[?12l[?25h[?25l[1K I[?12l[?25h[?25l(B[0;1m[31mIN[39m(B[m[?12l[?25h[?25lI[K[?12l[?25h[?25l[42m[1K [49m(B[m [?12l[?25h[?25l[2;23r[23;1H[3S[1;30r[21;23H(B[0;1m[31mINST_R[39m(B[m(list[min_j]); (B[0;1m[34m// Read access before swap[22;7H[31mINST_R[39m(B[m(list[i]); (B[0;1m[34m// Read access before swap[23;7H[39m(B[mtmp = list[min_j];[24;6H[1K list[min_j] = list[i];[25;7H(B[0;1m[31mINST_W[39m(B[m(list[min_j]); (B[0;1m[34m// Write access after swap[26;3H[39m(B[m    list[i] = tmp;[27;6H[1K (B[0;1m[31mINST_W[39m(B[m(list[i]); (B[0;1m[34m// Write access after swap[39m(B[m[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[7G  (B[0;1m[31mINST_W[39m(B[m(list[i]); (B[0;1m[34m// Write access after swap[27;9H[39m(B[m[?12l[?25h[?25l[A[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[27d[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;9H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;3H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;1H}[?12l[?25h[?25l7[2;28r8[28d
[1;30r[27;1H[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[A}[?12l[?25h[?25l[A }[?12l[?25h[?25l[A[?12l[?25h[?25l[23;7H[?12l[?25h[?25l  [?12l[?25h[?25l[16G[1K (B[0;1m[31mINST_W[39m(B[m(list[i]); (B[0;1m[34m// Write access after swap[23;17H[39m(B[m[?12l[?25h[?25l[23;9H[?12l[?25h[?25l[A[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[7G  list[i] = tmp;[22;9H[?12l[?25h[?25l[16G[1K list[i] = tmp;[22;17H[?12l[?25h[?25l[22;9H[?12l[?25h[?25l[A[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[7G  (B[0;1m[31mINST_W[39m(B[m(list[min_j]); (B[0;1m[34m// Write access after swap[21;9H[39m(B[m[?12l[?25h[?25l[16G[1K (B[0;1m[31mINST_W[39m(B[m(list[min_j]); (B[0;1m[34m// Write access after swap[21;17H[39m(B[m[?12l[?25h[?25l[A[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[7G  list[min_j] = list[i];[20;9H[?12l[?25h[?25l[16G[1K list[min_j] = list[i];[20;17H[?12l[?25h[?25l[20;9H[?12l[?25h[?25l[A[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[7G  tmp = list[min_j];[19;9H[?12l[?25h[?25l[16G[1K tmp = list[min_j];[19;17H[?12l[?25h[?25l[19;9H[?12l[?25h[?25l[A[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[7G  (B[0;1m[31mINST_R[39m(B[m(list[i]); (B[0;1m[34m// Read access before swap[18;9H[39m(B[m[?12l[?25h[?25l[16G[1K (B[0;1m[31mINST_R[39m(B[m(list[i]); (B[0;1m[34m// Read access before swap[18;17H[39m(B[m[?12l[?25h[?25l[19d[?12l[?25h[?25l[A[?12l[?25h[?25l[A[?12l[?25h[?25l[8P[17;9H[?12l[?25h[?25l[17;22H[1K (B[0;1m[31mINST_R[39m(B[m(list[min_j]); (B[0;1m[34m// Read access before swap[17;17H[39m(B[m[?12l[?25h[?25l[8P[17;9H[?12l[?25h[?25l[4P    [?12l[?25h[?25l[1P   [?12l[?25h[?25l[1P  [?12l[?25h[?25l[1P [?12l[?25h[?25l[1P[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[C[?12l[?25h[?25l[?12l[?25h[?25l[1P[6G[?12l[?25h[?25l[1P    [?12l[?25h[?25l[1P   [?12l[?25h[?25l[1P  [?12l[?25h[?25l[1P [?12l[?25h[?25l[1P[?12l[?25h[?25l[17;28r[28;1H
[1;30r[16;25H(B[0;1m[31mINST_R[39m(B[m(list[min_j]); (B[0;1m[34m// Read access before swap[16;25H[39m(B[m[?12l[?25h[?25l7[16;28r8M[1;30r[16;9H(B[0;1m[33mif[39m(B[m (i != min_j){[17d[24P[?12l[?25h[?25l[8G[1K (B[0;1m[31mINST_R[39m(B[m(list[min_j]); (B[0;1m[34m// Read access before swap[17;9H[39m(B[m[?12l[?25h[?25l[16G[1K (B[0;1m[31mINST_R[39m(B[m(list[min_j]); (B[0;1m[34m// Read access before swap[17;17H[39m(B[m[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l([?12l[?25h[?25ll[?12l[?25h[?25li[?12l[?25h[?25ls[?12l[?25h[?25lt[?12l[?25h[?25l[[?12l[?25h[?25lm[?12l[?25h[?25li[?12l[?25h[?25ln[?12l[?25h[?25l_[?12l[?25h[?25lj[?12l[?25h[?25l][?12l[?25h[?25l)[?12l[?25h[?25l;[?12l[?25h[?25l [?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[C[?12l[?25h[?25l[18d[?12l[?25h[?25l[19d[?12l[?25h[?25l[18;60H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l/[K[?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l[A[?12l[?25h[?25l[16;25H[?12l[?25h[?25l[17d[?12l[?25h[?25l[16;25H[?12l[?25h[?25l[17d[?12l[?25h[?25l[18d[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[?12l[?25h[?25l[19d[?12l[?25h[?25l[20d[?12l[?25h[?25l[21d[?12l[?25h[?25l[22d[?12l[?25h[?25l[23d[?12l[?25h[?25l[23;9H[?12l[?25h[?25l[24d[?12l[?25h[?25l[?12l[?25h[?25l[23;60H[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l [?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l [?12l[?25h[?25l/[K[?12l[?25h[?25l[42m [49m(B[m[K[?12l[?25h[?25l[28;54H(B[0;7m[ Writing... ](B[m[1;111H(B[0;7m        (B[m[28;52H(B[0;7m[ Wrote 34 lines ](B[m[23;34H[?12l[?25h[?25l[28d[J[30d[?12l[?25h[30;1H[?1049l[23;0;0t[?1l>[?2004lmisma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ ./cache -h -h[Kg

VisiCache OpenGL Cache Simulator - copyright Andrew Gee, November 2002
----------------------------------------------------------------------

usage: ./cache s:b:a:rgh
where command line arguments may be:

  -s size[k]    size of the cache in [k]bytes (default 128 bytes)
  -b number     number of words per block (default 1, must be a power of 2)
  -a degree     degree of associativity (default 1)
  -r            use random block replacement (default is to use LRU)
  -g            enable graphical display (default is no graphical display)
  -h            this help message

The specified cache size (-s argument) must result in a whole number of
sets which is a whole power of two: otherwise, the program will not run.

The cache simulator reads a sequence of addresses (in binary, not ASCII)
from the standard input. These addresses may conveniently be piped from
another running process, or redirected from a file.

When the graphical display is enabled, the program responds to several key
strokes and mouse actions:

  click and drag mouse   pan display left/right and up/down
  up/down cursor keys    zoom display in/out
  space                  perform a single cache access, halt continuous access
  enter                  perform continuous cache accesses
  `d' or `D'             cycle the address display through the three options
  `3'                    toggle 3D mode on/off (if supported by display)
  `q', `Q' or escape     quit the graphical display

In the graphical display, occupied cache blocks are shown shaded blue. The
last block to be accessed is shaded green (for a hit) or red (for a miss).
Addresses are displayed only when zoomed in sufficiently to be able to read
them. The default is to display the byte address of each word: use the `d'
key to display instead the block address or the set index.

In 3D mode, hit and miss counts are displayed as vertical bars on either side
of each cache block. Click and drag with the middle and right mouse buttons to
rotate the cache in 3D. This mode is available only on displays which support
depth buffers.

misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ ./cache -h -g[C[1P-g[1P-g[1Pg

Summary of cache properties:
----------------------------

Cache size 128 bytes 	 Block size 1 words 	 Associativity 1
Number of sets 32 	 Number of blocks 32
Hit time 10 	 	 Miss penalty 110


Cumulative access statistics:
-----------------------------

Accesses 	 Hits 	 	 Misses 	 Miss rate (%) 	 Total time
freeglut (./cache): failed to open display ''
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ g++ sort.cc
In file included from [01m[Kqsort.cc:2[m[K,
                 from [01m[Ksort.cc:5[m[K:
[01m[Kinst_legible.h:1:[m[K [01;35m[Kwarning: [m[K"INST_R" redefined
    1 | #define INST_R(x) cout << "Read from " << hex << &(x) << endl
      | 
In file included from [01m[Ksort.cc:1[m[K:
[01m[Kinst_none.h:1:[m[K [01;36m[Knote: [m[Kthis is the location of the previous definition
    1 | #define INST_R(x)
      | 
In file included from [01m[Kqsort.cc:2[m[K,
                 from [01m[Ksort.cc:5[m[K:
[01m[Kinst_legible.h:2:[m[K [01;35m[Kwarning: [m[K"INST_W" redefined
    2 | #define INST_W(x) cout << "Write to " << hex << &(x) << endl
      | 
In file included from [01m[Ksort.cc:1[m[K:
[01m[Kinst_none.h:2:[m[K [01;36m[Knote: [m[Kthis is the location of the previous definition
    2 | #define INST_W(x)
      | 
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ tput rmam
[?7lmisma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ ./a.out | ./cache -s 4k -b 2

Summary of cache properties:
----------------------------

Cache size 4096 bytes 	 Block size 2 words 	 Associativity 1
Number of sets 512 	 Number of blocks 512
Hit time 10 	 	 Miss penalty 120


Cumulative access statistics:
-----------------------------

Accesses 	 Hits 	 	 Misses 	 Miss rate (%) 	 Total time
0          	 0          	 0          	 -nan 	 	 0         

misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ cat qsort.cc 
#include <iostream>
#include "inst_legible.h"//For instr

using namespace std;
int Partition(int list[], int lo, int hi);

// QuickSort - this simple version assumes no repeated items in the list
void QSort(int list[], int lo, int hi)
{
  int k;
  if (lo < hi) {
    // Partition the list into two sub-lists
    k = Partition(list, lo, hi);
    // Now every item left of position k is smaller than the item at k,
    // while every item right of position k is larger than the item at k
    QSort(list, lo, k - 1); // sort the sublist to the left of k
    QSort(list, k + 1, hi); // sort the sublist to the right of k
  }
}

// Partition function for QuickSort
int Partition(int list[], int lo, int hi)
{
  int x, tmp;
  // Pick an arbitrary key, say half way through the list
  INST_R(list[(lo + hi) / 2]);
  x = list[(lo + hi) / 2];
  // Now swap items until every item to the left of the key is smaller than
  // the key, and every item to the right of the key is larger than the key
  while (lo < hi)
  {
    //Swap the two items we've discovered on the wrong side of the key
    while ( (lo < hi) && (x < list[hi]) )
    {
        hi--;
        if (lo < hi){
                INST_R(list[hi]);
        }
    }
    // Scan from the left until we find an item larger than the key
    while ( (lo < hi) && (x > list[lo]) )
    {
        lo++;
        if(lo < hi){
                INST_R(list[lo]);
        }
    }
    // Scan from the right until we find an item smaller than the key
    if (lo < hi)
    {
        INST_R(list[lo]);
        INST_R(list[hi]); //given!
        tmp = list[lo];
        list[lo] = list[hi];
        INST_W(list[lo]);
        list[hi] = tmp;
        INST_W(list[hi]);
    }
    
    // you may need to edit this section below..

    
    
  }
  return lo; // this is where the key is now
}
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ cat xsort.cc 
#include <iostream>
using namespace std;

void XSort(int list[], int n)
  // Exchange sort
{
  int min, tmp, i, j, min_j;
  // Scan the list from the left to the right
  for (i = 0; i < n - 1; i++) {
    // Remember the item at position i
    INST_R(list[i]);
    min = list[i]; 
    min_j = i;
    // Check the list to the right of position i for any smaller items
    for (j = i + 1; j < n; j++) {
      INST_R(list[j]);
      if (list[j] < min) {
        // Remember where this smaller item is
        min = list[j]; 
        min_j = j;
      }
    }
    // Swap the item at position i with the smallest item found to the right
    	if (i != min_j){
		INST_R(list[min_j]); // Read access before swap
      		INST_R(list[i]); 
      		tmp = list[min_j];
      		list[min_j] = list[i];
      		INST_W(list[min_j]); // Write access after swap
      		list[i] = tmp;
      		INST_W(list[i]); 
	}
  }
}
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ cat sort.cc 
#include "inst_none.h"
#include <iostream>
#include <stdlib.h>
#include "xsort.cc"
#include "qsort.cc"
using namespace std;

const int listSize = 10000;
int l[listSize];
int main()
{
  int i, tmp, i1, i2;
  // Generate a list with no repeated numbers
  for (i = 0; i < listSize; i++) {
    l[i] = i;
  }
  // Scramble the numbers thoroughly
  for (i = 0; i < listSize; i++) {
    i1 = rand() % listSize;
    i2 = rand() % listSize;
    tmp = l[i1];
    l[i1] = l[i2]; l[i2] = tmp;
  }
  // Sort the list by exchange sort or QuickSort - comment out the
  // one you don't want to use
  XSort(l, listSize);
  // QSort(l, 0, listSize - 1);
  return 0; // return success code
}
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator$ cd -
/AD-home/misma2/Documents/CS261Labs/Lab12
misma2@cs-sys3:~/Documents/CS261Labs/Lab12$ ls
cache_simulator  cache_simulator.zip  lab12.cs261
misma2@cs-sys3:~/Documents/CS261Labs/Lab12$ lscd -at sort.cc [1@x[C[C[C[C[C[C[C[Cq[C[C[C[C[C[C[C[C./a.out | ./cache -s 4k -b 2tput rmam[Kg++ sort.cc[1P./cache -gh -gnano xsort.cc [1Pcat q[C[C[C[C[C[C[C[Cnano qsort.cc[2Prm[C[C[C[C[C[C[C[C[Cnano qsort.cc [1Pcat[C[C[C[C[C[C[C[C[C[C[1@nano[C[C[C[C[C[C[C[C[C[Cls[Knano qsort.cc [1Pcat x[C[C[C[C[C[C[C[Cq[C[C[C[C[C[C[C[Cls[K[Kcd cache_simulatorls[Kexitnano phase3-answer.txt [13@./ctarget < hexed-[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Chex2raw < phase3-answer.txt > hexed-phase3-answer.txt[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[32Pnano phase3-answer.txt ./hex2raw < phase3-answer.txt > hexed-phase3-answer.txt[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[19Pctarget < hexed-phase3-answer.txt [13Pnano [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cexit[K[2Plscd cache_simulatorl[Kscat qsort.cc x[C[C[C[C[C[C[C[C[1@nano q[C[C[C[C[C[C[C[Cls[Knano qsort.cc [1Pcat[C[C[C[C[C[C[C[C[C[C[1@nano[C[C[C[C[C[C[C[C[C[C[3Prm qsort.cc[2@nano[C[C[C[C[C[C[C[C[Ccat qsort.cc [1@nano x[C[C[C[C[C[C[C[C[1P./cache -h -gg[Kg++ sort.cc[2Ptput rmam./a.out | ./cache -s 4k -b 2[15Pcat qsort.cc x[C[C[C[C[C[C[C[C[1P[C[C[C[C[C[C[C[Cd -[K[2Pls[Kunzip -d cache_simulator cache_simulator.zip[C_ cache_simulator.zipi cache_simulator.zipo cache_simulator.zipr cache_simulator.zip[1P cache_simulator.zip[1P cache_simulator.zip[1P cache_simulator.zipo cache_simulator.zipr cache_simulator.zipi cache_simulator.zipg cache_simulator.zipi cache_simulator.zipn cache_simulator.zipa cache_simulator.zipl cache_simulator.zip
Archive:  cache_simulator.zip
  inflating: cache_simulator_original/blocking.cc  
  inflating: cache_simulator_original/cache  
  inflating: cache_simulator_original/histogram.cc  
  inflating: cache_simulator_original/inst_compact.h  
  inflating: cache_simulator_original/inst_legible.h  
  inflating: cache_simulator_original/inst_none.h  
  inflating: cache_simulator_original/qsort.cc  
  inflating: cache_simulator_original/sort.cc  
  inflating: cache_simulator_original/xsort.cc  
misma2@cs-sys3:~/Documents/CS261Labs/Lab12$ cal[Kche-sim[K[K[K[K[K[Khe[K[K[K[K[Kls[K[Kcd cache_simulator-[K_original/
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator_original$ ls
blocking.cc  cache  histogram.cc  inst_compact.h  inst_legible.h  inst_none.h  qsort.cc  sort.cc  xsort.cc
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator_original$ cat xsort.cc 
#include <iostream>
using namespace std;

void XSort(int list[], int n)
  // Exchange sort
{
  int min, tmp, i, j, min_j;
  // Scan the list from the left to the right
  for (i = 0; i < n - 1; i++) {
    // Remember the item at position i
    min = list[i]; 
    min_j = i;
    // Check the list to the right of position i for any smaller items
    for (j = i + 1; j < n; j++) {
      if (list[j] < min) {
        // Remember where this smaller item is
        min = list[j]; 
        min_j = j;
      }
    }
    // Swap the item at position i with the smallest item found to the right
    tmp = list[min_j]; 
    list[min_j] = list[i];
    list[i] = tmp;
  }
}
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator_original$ cat qsort.cc 
#include <iostream>
using namespace std;
int Partition(int list[], int lo, int hi);

// QuickSort - this simple version assumes no repeated items in the list
void QSort(int list[], int lo, int hi)
{
  int k;
  if (lo < hi) {
    // Partition the list into two sub-lists
    k = Partition(list, lo, hi);
    // Now every item left of position k is smaller than the item at k,
    // while every item right of position k is larger than the item at k
    QSort(list, lo, k - 1); // sort the sublist to the left of k
    QSort(list, k + 1, hi); // sort the sublist to the right of k
  }
}

// Partition function for QuickSort
int Partition(int list[], int lo, int hi)
{
  int x, tmp;
  // Pick an arbitrary key, say half way through the list
  x = list[(lo + hi) / 2];
  // Now swap items until every item to the left of the key is smaller than
  // the key, and every item to the right of the key is larger than the key
  while (lo < hi) 
  {
    // Scan from the right until we find an item smaller than the key
    if (lo < hi)
    {
      INST_R(list[hi]); //given!
    }    
    while ( (lo < hi) && (x < list[hi]) ) 
    {
      hi--;	
      if (lo >= hi)
      {
        break;
      }
      else
      {
        INST_R(list[hi]); //given!
      }
    }
    // you may need to edit this section below..

    // Scan from the left until we find an item larger than the key
    while ( (lo < hi) && (x > list[lo]) ) 
    {
      lo++;
    }
    // Swap the two items we've discovered on the wrong side of the key
    tmp = list[lo]; 
    list[lo] = list[hi]; 
    list[hi] = tmp;
  }
  return lo; // this is where the key is now
}
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator_original$ ls
blocking.cc  cache  histogram.cc  inst_compact.h  inst_legible.h  inst_none.h  qsort.cc  sort.cc  xsort.cc
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator_original$ nano xsort.cc [K[K[K[K[K[K[K[K[K[K[K[K[K[Kcat qsort.cc 
#include <iostream>
using namespace std;
int Partition(int list[], int lo, int hi);

// QuickSort - this simple version assumes no repeated items in the list
void QSort(int list[], int lo, int hi)
{
  int k;
  if (lo < hi) {
    // Partition the list into two sub-lists
    k = Partition(list, lo, hi);
    // Now every item left of position k is smaller than the item at k,
    // while every item right of position k is larger than the item at k
    QSort(list, lo, k - 1); // sort the sublist to the left of k
    QSort(list, k + 1, hi); // sort the sublist to the right of k
  }
}

// Partition function for QuickSort
int Partition(int list[], int lo, int hi)
{
  int x, tmp;
  // Pick an arbitrary key, say half way through the list
  x = list[(lo + hi) / 2];
  // Now swap items until every item to the left of the key is smaller than
  // the key, and every item to the right of the key is larger than the key
  while (lo < hi) 
  {
    // Scan from the right until we find an item smaller than the key
    if (lo < hi)
    {
      INST_R(list[hi]); //given!
    }    
    while ( (lo < hi) && (x < list[hi]) ) 
    {
      hi--;	
      if (lo >= hi)
      {
        break;
      }
      else
      {
        INST_R(list[hi]); //given!
      }
    }
    // you may need to edit this section below..

    // Scan from the left until we find an item larger than the key
    while ( (lo < hi) && (x > list[lo]) ) 
    {
      lo++;
    }
    // Swap the two items we've discovered on the wrong side of the key
    tmp = list[lo]; 
    list[lo] = list[hi]; 
    list[hi] = tmp;
  }
  return lo; // this is where the key is now
}
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator_original$ stop

Command 'stop' not found, but there are 18 similar ones.

misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator_original$ script
Script started, file is typescript
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator_original$ stop

Command 'stop' not found, but there are 18 similar ones.

misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator_original$ exit
exit
Script done, file is typescript
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator_original$ script[2Ptopcat qsort.cc stop[Kcript[Kjobs
misma2@cs-sys3:~/Documents/CS261Labs/Lab12/cache_simulator_original$ exit
exit

Script done on 2023-11-15 15:28:59-06:00 [COMMAND_EXIT_CODE="0"]
